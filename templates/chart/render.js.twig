/*! {#
     # This file is auto-generated. Do NOT attempt to edit directly.
     # Instead, edit `src/render/index.js` and run make build
     #} */
var render = (function () {
'use strict';

function e(e){return function(o){var r=o.toLowerCase().match(e);return!!r&&parseInt(r[1],10)}}var o={chrome:e(/chrom(?:e|ium)\/([0-9]+)\./),firefox:e(/firefox\/([0-9]+\.*[0-9]*)/),safari:e(/version\/([0-9]+).[0-9]+.[0-9]+ safari/),ie:e(/(?:msie |rv:)([0-9]+).[0-9]+/),edge:e(/edge\/([0-9]+).[0-9]+.[0-9]+/)};function getBrowser(){var e="undefined"!=typeof InstallTrigger,r=/constructor/i.test(window.HTMLElement)||"[object SafariRemoteNotification]"===(!window.safari||window.safari.pushNotification).toString(),i=!!document.documentMode,t=!i&&!!window.StyleMedia,n=window.chrome&&window.chrome.loadTimes?"chrome":e?"firefox":r?"safari":i?"ie":!!t&&"edge";return{browser:n,version:!(!n||!o[n])&&o[n](navigator.userAgent)}}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var fontfaceobserver_standalone = createCommonjsModule(function (module) {
/* Font Face Observer v2.1.0 - Â© Bram Stein. License: BSD-3-Clause */(function(){function l(a,b){document.addEventListener?a.addEventListener("scroll",b,!1):a.attachEvent("scroll",b);}function m(a){document.body?a():document.addEventListener?document.addEventListener("DOMContentLoaded",function c(){document.removeEventListener("DOMContentLoaded",c);a();}):document.attachEvent("onreadystatechange",function k(){if("interactive"==document.readyState||"complete"==document.readyState){ document.detachEvent("onreadystatechange",k), a(); }});}function t(a){this.a=document.createElement("div");this.a.setAttribute("aria-hidden","true");this.a.appendChild(document.createTextNode(a));this.b=document.createElement("span");this.c=document.createElement("span");this.h=document.createElement("span");this.f=document.createElement("span");this.g=-1;this.b.style.cssText="max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;";this.c.style.cssText="max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;";
this.f.style.cssText="max-width:none;display:inline-block;position:absolute;height:100%;width:100%;overflow:scroll;font-size:16px;";this.h.style.cssText="display:inline-block;width:200%;height:200%;font-size:16px;max-width:none;";this.b.appendChild(this.h);this.c.appendChild(this.f);this.a.appendChild(this.b);this.a.appendChild(this.c);}
function u(a,b){a.a.style.cssText="max-width:none;min-width:20px;min-height:20px;display:inline-block;overflow:hidden;position:absolute;width:auto;margin:0;padding:0;top:-999px;white-space:nowrap;font-synthesis:none;font:"+b+";";}function z(a){var b=a.a.offsetWidth,c=b+100;a.f.style.width=c+"px";a.c.scrollLeft=c;a.b.scrollLeft=a.b.scrollWidth+100;return a.g!==b?(a.g=b, !0):!1}function A(a,b){function c(){var a=k;z(a)&&a.a.parentNode&&b(a.g);}var k=a;l(a.b,c);l(a.c,c);z(a);}function B(a,b){var c=b||{};this.family=a;this.style=c.style||"normal";this.weight=c.weight||"normal";this.stretch=c.stretch||"normal";}var C=null,D=null,E=null,F=null;function G(){if(null===D){ if(J()&&/Apple/.test(window.navigator.vendor)){var a=/AppleWebKit\/([0-9]+)(?:\.([0-9]+))(?:\.([0-9]+))/.exec(window.navigator.userAgent);D=!!a&&603>parseInt(a[1],10);}else { D=!1; } }return D}function J(){null===F&&(F=!!document.fonts);return F}
function K(){if(null===E){var a=document.createElement("div");try{a.style.font="condensed 100px sans-serif";}catch(b){}E=""!==a.style.font;}return E}function L(a,b){return[a.style,a.weight,K()?a.stretch:"","100px",b].join(" ")}
B.prototype.load=function(a,b){var c=this,k=a||"BESbswy",r=0,n=b||3E3,H=(new Date).getTime();return new Promise(function(a,b){if(J()&&!G()){var M=new Promise(function(a,b){function e(){(new Date).getTime()-H>=n?b(Error(""+n+"ms timeout exceeded")):document.fonts.load(L(c,'"'+c.family+'"'),k).then(function(c){1<=c.length?a():setTimeout(e,25);},b);}e();}),N=new Promise(function(a,c){r=setTimeout(function(){c(Error(""+n+"ms timeout exceeded"));},n);});Promise.race([N,M]).then(function(){clearTimeout(r);a(c);},
b);}else { m(function(){function v(){var b;if(b=-1!=f&&-1!=g||-1!=f&&-1!=h||-1!=g&&-1!=h){ (b=f!=g&&f!=h&&g!=h)||(null===C&&(b=/AppleWebKit\/([0-9]+)(?:\.([0-9]+))/.exec(window.navigator.userAgent), C=!!b&&(536>parseInt(b[1],10)||536===parseInt(b[1],10)&&11>=parseInt(b[2],10))), b=C&&(f==w&&g==w&&h==w||f==x&&g==x&&h==x||f==y&&g==y&&h==y)), b=!b; }b&&(d.parentNode&&d.parentNode.removeChild(d), clearTimeout(r), a(c));}function I(){if((new Date).getTime()-H>=n){ d.parentNode&&d.parentNode.removeChild(d), b(Error(""+
n+"ms timeout exceeded")); }else{var a=document.hidden;if(!0===a||void 0===a){ f=e.a.offsetWidth, g=p.a.offsetWidth, h=q.a.offsetWidth, v(); }r=setTimeout(I,50);}}var e=new t(k),p=new t(k),q=new t(k),f=-1,g=-1,h=-1,w=-1,x=-1,y=-1,d=document.createElement("div");d.dir="ltr";u(e,L(c,"sans-serif"));u(p,L(c,"serif"));u(q,L(c,"monospace"));d.appendChild(e.a);d.appendChild(p.a);d.appendChild(q.a);document.body.appendChild(d);w=e.a.offsetWidth;x=p.a.offsetWidth;y=q.a.offsetWidth;I();A(e,function(a){f=a;v();});u(e,
L(c,'"'+c.family+'",sans-serif'));A(p,function(a){g=a;v();});u(p,L(c,'"'+c.family+'",serif'));A(q,function(a){h=a;v();});u(q,L(c,'"'+c.family+'",monospace'));}); }})};module.exports=B;}());
});

/* @DEPRECATED: plase use @datawrapper/shared instead */

/**
 * Function that returns a promise, that resolves when all fonts,
 * specified in fontsJSON and typographyJSON have been loaded.
 *
 * @export
 * @param {Object|Array} fontsJSON
 * @param {Object} typographyJSON
 * @returns {Promise}
 */
function observeFonts(fontsJSON, typographyJSON) {
    /* Render vis again after fonts have been loaded */
    var loadingFonts = Array.isArray(fontsJSON) ? [] : Object.keys(fontsJSON);
    var fonts = new Set(loadingFonts);

    Object.keys(typographyJSON).forEach(function (key) {
        var typefaceKey = typographyJSON[key].typeface;
        if (typefaceKey) {
            var typeFaces = typefaceKey.split(',').map(function (t) { return t.trim(); });
            typeFaces.forEach(function (face) { return fonts.add(face); });
        }
    });

    var observers = [];
    fonts.forEach(function (font) {
        var obs = new fontfaceobserver_standalone(font);
        observers.push(obs.load(null, 5000));
    });

    return Promise.all(observers);
}

/* globals dw, __dw, $ */

function index(ref) {
    var visJSON = ref.visJSON;
    var chartJSON = ref.chartJSON;
    var chartData = ref.chartData;
    var isPreview = ref.isPreview;
    var chartLocale = ref.chartLocale;
    var metricPrefix = ref.metricPrefix;
    var themeId = ref.themeId;
    var templateJS = ref.templateJS;
    var fontsJSON = ref.fontsJSON;
    var typographyJSON = ref.typographyJSON;
    var locales = ref.locales;

    window.visJSON = visJSON;

    // load polyfills
    var availablePolyfills = {
        firefox: [30, 51],
        chrome: [20, 54],
        ie: [6, 11],
        edge: [12, 18],
        safari: [6, 12]
    };

    // see https://github.com/datawrapper/polyfills/blob/master/src/getBrowser.js
    var environment = getBrowser();
    // create script tag for polyfill
    var script = document.createElement('script');
    script.type = 'text/javascript';
    script.async = true;
    script.onload = run;
    // render the chart even if load fails!
    script.onerror = run;

    if (environment.browser && availablePolyfills[environment.browser] && environment.version >= availablePolyfills[environment.browser][0]) {
        if (environment.version > availablePolyfills[environment.browser][1]) {
            // no need for polyfill, browser is quite new
            return run();
        }
        // use cached polyfill.io polyfills
        script.src = 'https://datawrapper.dwcdn.net/lib/polyfills/' + environment.browser + '-' + environment.version + '.js';
    } else {
        // unknown browser, fall back to generic polyfill
        script.src = 'https://datawrapper.dwcdn.net/lib/polyfills/all.js';
    }

    document.getElementsByTagName('head')[0].appendChild(script);

    function run() {
        __dw.init(
            Object.assign(
                {
                    visJSON: visJSON,
                    chartJSON: chartJSON,
                    data: chartData,
                    preview: isPreview,
                    chartLocale: chartLocale,
                    locales: locales,
                    themeId: themeId,
                    visId: chartJSON.type,
                    lang: chartLocale.substr(0, 2),
                    metricPrefix: metricPrefix
                },
                window.__dwParams || {}
            )
        );

        observeFonts(fontsJSON, typographyJSON)
            .then(function () { return __dw.render(); })
            .catch(function () { return __dw.render(); });

        // iPhone/iPad fix
        if (/iP(hone|od|ad)/.test(navigator.platform)) {
            window.onload = __dw.render();
        }

        var themeFitChart = false;
        var theme = dw.theme(themeId);
        if (theme && theme.pieChart && theme.pieChart.fitchart) {
            themeFitChart = theme.pieChart.fitchart === 1 || theme.pieChart.fitchart === true;
        }
        var urlParams = new URLSearchParams(window.location.search);
        var isFitChart = urlParams.get('fitchart') === '1' || themeFitChart;

        setInterval(function() {
            var obj;

            var desiredHeight;
            if (visJSON.height === 'fixed' && !isFitChart) {
                desiredHeight = $('html').outerHeight(true);
            } else {
                if (__dw.params.preview || !__dw.vis.chart().get('metadata.publish.chart-height')) {
                    return;
                }

                desiredHeight = dw.utils.getNonChartHeight() + __dw.vis.chart().get('metadata.publish.chart-height');
            }

            // datawrapper responsive embed
            window.parent.postMessage(
                {
                    'datawrapper-height': ( obj = {}, obj[chartJSON.id] = desiredHeight, obj)
                },
                '*'
            );

            // Google AMP
            window.parent.postMessage(
                {
                    sentinel: 'amp',
                    type: 'embed-size',
                    height: desiredHeight
                },
                '*'
            );

            // Medium
            window.parent.postMessage(
                JSON.stringify({
                    src: window.location.toString(),
                    context: 'iframe.resize',
                    height: desiredHeight
                }),
                '*'
            );
        }, 1000);

        if (typeof templateJS === 'function') {
            templateJS();
        }
    }
}

return index;

}());
