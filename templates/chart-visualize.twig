{% extends "chart-editor.twig" %}
{% block content %}

{{ parent() }}

{% set vismeta = chart.metadata.visualize %}

<script type="text/javascript">

$.extend($.easing, {
    easeInExpo: function (x, t, b, c, d) {
        return (t==0) ? b : c * Math.pow(2, 10 * (t/d - 1)) + b;
    },
    easeOutExpo: function (x, t, b, c, d) {
        return (t==d) ? b+c : c * (-Math.pow(2, -10 * t/d) + 1) + b;
    },
    easeInOutExpo: function (x, t, b, c, d) {
        if (t==0) return b;
        if (t==d) return b+c;
        if ((t/=d/2) < 1) return c/2 * Math.pow(2, 10 * (t - 1)) + b;
        return c/2 * (-Math.pow(2, -10 * --t) + 2) + b;
    }
});

$(function() {

    function classify(s) {
        s = s.replace(/[-_\s]+(.)?/g, function(match, c){ return c.toUpperCase(); });
        s = s.substr(0, 1).toUpperCase() + s.substr(1);
        return s;
    }

    $.fn.colorpicker = function(props) {
        var rt = $(this),
            colors = rt.data('colors').toLowerCase().split(','),
            active = (rt.data('color') || "").toLowerCase();
        // clean up html at first
        rt.html('');
        rt.css({
            position: 'relative'
        });
        var c = 0, r = 0;
        $.each(colors, function(i, col) {
            if (!col) return;
            var d = $('<div />');
            if ((c+1)*28 > rt.parent().width()) {
                c = 0;
                r+=1;
                rt.css('height', (r+1)*28+4);
            }
            d.css({
                position: 'absolute',
                left: c*28 - (col == active ? 1 : 0),
                top: r*28 + (col == active ? -1 : 0),
                height: 26,
                width: 26,
                cursor: 'pointer',
                background: col,
                'border-radius': col == active ? 4 : 0,
                'border-width': col == active ? 3 : 2,
                'border-style': 'solid',
                'border-color': col == active ? 'black' : 'white',
                'z-index': (col == active ? '10' : '0')
            });
            d.data('color', col);
            d.click(function(e) {
                var a = $(e.target);
                rt.data('color', a.data('color'));
                rt.colorpicker(props);
                if (props && props.change) props.change(rt.data('color'));
            });
            rt.append(d);
            c += 1;

        });
    };

    var _typeHasChanged = false,
        _themeHasChanged = false,
        chart = DW.currentChart,
        themes = {{ themes | json | raw }},
        themesById = {};

    $.each(themes, function(i, theme) { themesById[theme.id] = theme; themesById[theme.id].__loaded = false });

    function loadThemeColors() {
        var picker = $('#select-color'),
            customColors = $('#palette-colors'),
            themeid = $('#select-theme').val(),
            theme = themesById[themeid],
            needed = [themeid];
        while (theme['extends']) {
            needed.unshift(theme['extends']);
            theme = themesById[theme['extends']];
        }
        function loadNext() {
            if (needed.length > 0) {
                var next = themesById[needed.shift()];
                if (!next.__loaded) {
                    next.__loaded = true;
                    $.getScript('/static/themes/' + next.id + '/theme.js', loadNext);
                } else {
                    loadNext();
                }
            } else {
                allLoaded();
            }
        }
        function allLoaded() {
            var themeClass = classify(themeid),
                theTheme = Datawrapper.Themes[themeClass];

            picker.data('colors', theTheme.colors.palette.join(','));
            picker.data('color', theTheme.colors.palette[chart.get('metadata.visualize.base-color', 0)]);
            picker.colorpicker({
                change: function(color) {
                    var colIndex = theTheme.colors.palette.join(',').toLowerCase().split(',').indexOf(color.toLowerCase());
                    chart.set('metadata.visualize.base-color', colIndex);
                }
            });
            chart.set('metadata.publish.background', theTheme.colors.background);
            chart.set('metadata.publish.contextBg', theTheme.colors.contextBackground);
            chart.set('metadata.publish.text', theTheme.colors.text);

            var colors = theTheme.colors.palette.slice().concat(theTheme.colors.secondary || []);
            customColors.data('colors', colors.join(','));
        }
        loadNext();
    } // end loadThemeColors()

    function loadOptions() {
        $('#vis-options').load('/xhr/'+chart.get('id')+'/vis-options?nocache='+Math.random(), function() {
            // update colors
            loadThemeColors();
        });
    }

    chart.onSave(function(chart) {

        $('#iframe-vis').attr('src', '/chart/{{ chart.id }}/preview?nocache='+Math.random());

        if (_themeHasChanged) {
            $("#iframe-vis").load(updateVisBackground);
            _.each(themes, function(theme) {
                if (theme.id == chart.get('theme')) {
                    if (theme.default_width) $('#iframe-wrapper').width(theme.default_width);
                    else $('#iframe-wrapper').width('auto');
                    if (theme.default_height) $('#iframe-wrapper').height(theme.default_height);
                    return false;
                }
            });
        }

        if (_typeHasChanged || _themeHasChanged) {
            // load new visualization options
            loadOptions();
        }

        _themeHasChanged = false;
        _typeHasChanged = false;
    });

//    chart.sync('#select-vis', 'type');
    chart.sync('#select-theme', 'theme');
    chart.sync('#text-title', 'title');
    chart.sync('#text-intro', 'metadata.describe.intro');

    chart.onChange(function(chart, key, value) {
        if (key == 'type') {
            _typeHasChanged = true;
        } else if (key == 'theme') {
            _themeHasChanged = true;
        }
    });

    // load dataset
    function _getHighlights() {
        var sel = chart.get('metadata.visualize.highlighted-series');
        return _.isArray(sel) ? sel.slice() : [];
    }

    function highlightSeriesClick(e) {
        var badge = $(e.target).parents('.badge'),
            series = badge.data('series'),
            li = badge;
            selected = _getHighlights();
        selected = _.without(selected, String(series));
        chart.set('metadata.visualize.highlighted-series', selected);
        li.remove();
        e.preventDefault();
    }
    $('.highlighted-series .badge').click(highlightSeriesClick);

    function onDatasetLoaded(ds) {
        var s = $('#highlight-series'), s2 = $('.highlighted-series');
        s.find("option[value!='---']").remove();
        _.each(chart.dataSeries(), function(col) {
            s.append('<option>'+col.name+'</option>');
        });
        s.change(function() {
            if (s.val() != "---") {
                var selected = _getHighlights();
                if (_.indexOf(selected, s.val()) >= 0) {
                    s.val('---');
                    return;
                }

                var span = $('<span data-series="'+s.val()+'" class="badge badge-info"><i class="icon-remove icon-white"></i>'+s.val()+'</span>');

                selected.push(s.val());

                chart.set('metadata.visualize.highlighted-series', selected);

                s2.append(span);
                span.click(highlightSeriesClick);
                s.val('---');
            }
        });
        _.each(themes, function(theme) {
            if (theme.id == chart.get('theme')) {
                if (theme.default_width) $('#iframe-wrapper').width(theme.default_width);
                else $('#iframe-wrapper').width('auto');
                if (theme.default_height) $('#iframe-wrapper').height(theme.default_height);
                return false;
            }
        });
        loadThemeColors();
    }

    chart.dataset(onDatasetLoaded);

    $('.collapse').on('shown', function(e) {
        var tgl = $('[data-toggle=collapse][data-target=#'+e.target.id+']');
        tgl.addClass('collapse-shown');
        tgl.removeClass('collapse-hidden');
    });

    $('.collapse').on('hidden', function(e) {
        var tgl = $('[data-toggle=collapse][data-target=#'+e.target.id+']');
        tgl.addClass('collapse-hidden');
        tgl.removeClass('collapse-shown');
    });

    function updateVisBackground() {  // and show msg if chart needs more space
        var iframe = $('#iframe-vis').contents(),
            bgcol =  $('body', iframe).css('background-color'),
            white = bgcol == 'rgb(255, 255, 255)' || bgcol == '#ffffff' || bgcol == 'white' || bgcol == 'transparent',
            border = white ? '#ffffff' : '#bbb';

        bgcol = DW.currentChart.get('metadata.publish.contextBg') || DW.currentChart.get('metadata.publish.background');

        $('#iframe-wrapper').css({
            'background-color': white ? '#ffffff' : bgcol,
            'border-color': border
        });

        var vis_h = iframe.height(),
            iframe_h = $('#iframe-vis').height();

        if (vis_h > iframe_h+5) {
            DW.logMessage('Watch out: Your chart needs more space. To get rid of the scrollbars just <a href="#" id="resize-iframe">resize iFrame to chart</a> ', $('.resize-chart-wrap'), 'warning');
            $('#resize-iframe').click(function(e) {
                e.preventDefault();
                //$('#iframe-wrapper').height(vis_h);
                $('#resize-h').val(vis_h);
                updateSize();
                $('.alert').remove();
            });
        }
    }

    $('#iframe-vis').load(updateVisBackground);

    $('.nav-tabs').each(function(i, el) {
        var navTabs = $(el);
        $('li a', navTabs).each(function(i, el) {
            $('.'+$(el).data('target')).hide();
            $(el).click(function(e) {
                e.preventDefault();
                $('.' + navTabs.data('target') + ' > div').hide();
                $('.' + $(e.target).data('target')).show();
                $('li', navTabs).removeClass('active');
                $(e.target).parents('li').addClass('active');
            });
        });
        $('li.active a', navTabs).each(function(i, el) {
            $('.'+$(el).data('target')).show();
        });
    });

    $('#btn-transpose').click(function(e) {
        e.preventDefault();
        chart.set('metadata.data.transpose', !chart.get('metadata.data.transpose'));
        chart.dataset(onDatasetLoaded);
        setTimeout(function() {
            loadOptions();
        }, 2000);
    });

    // graphical vis selector
    var unfolded = $('.vis-selector-unfolded'),
        folded = $('.vis-selector-folded'),
        thumbs = $('.vis-thumb'),
        selVis = $('.vis-selected');
    unfolded.data('h', unfolded.height());
    thumbs.click(function(e) {
        var thumb = $(e.target);
        if (!thumb.hasClass('vis-thumb')) thumb = thumb.parents('.vis-thumb');
        thumbs.removeClass('active');
        thumb.addClass('active');
        selVis.html('<img src="/static/visualizations/'+thumb.data('id')+'/thumb.png" width="24" />' + thumb.data('title'));
        setTimeout(function() {
            folded.show();
            unfolded.animate({ height: 0 }, 300, 'easeOutExpo', function() {
                unfolded.hide();
            });
            chart.set('type', thumb.data('id'));
        }, 100);
    });

    folded.click(function() {
        folded.hide();
        unfolded.height(0).show().animate({ height: unfolded.data('h') }, 300);
    });

    if (DW.__firstTime) {
        unfolded.show();
        folded.hide();
    }

    // chart resizing
    var __timer;
    function _updateSize() {
        clearTimeout(__timer);
        __timer = setTimeout(updateSize, 300);
    }
    function updateSize() {
        var w = Math.min(Number($('#resize-w').val()) || 600, $('.span7').width()-22),
            h = Number($('#resize-h').val()) || 400;
        $('#resize-w').val(w);
        $('#resize-h').val(h);
        $('#iframe-wrapper').animate({ width: w+'px', height: h+'px' }, 400, 'easeOutExpo');
        chart.set('metadata.publish.embed-width', w);
        chart.set('metadata.publish.embed-height', h);
    }
    $('.resize-chart a').click(function(e) {
        e.preventDefault();
        var dim = $(e.target).html().split('×');
        $('#resize-w').val(dim[0]);
        $('#resize-h').val(dim[1]);
        updateSize();
    });
    $('.resize-chart input').change(_updateSize);
    var cw = chart.get('metadata.publish.embed-width', $('#iframe-wrapper').width()),
        ch = chart.get('metadata.publish.embed-height', $('#iframe-wrapper').height());
    $('#resize-w').val(cw);
    $('#resize-h').val(ch);
    $('#iframe-wrapper').width(cw);
    $('#iframe-wrapper').height(ch);
    $('.affix-cont').css('width', $('#iframe-wrapper').width()+'px');
});

</script>

<div class="dw-create-visualize chart-editor">

    <div class="row">
        <div class="span7">

            <div class="affix-cont" data-spy="affix" data-offset-top="100" data-offset-bottom="130">
                <div id="iframe-wrapper" style="height:500px;" >
                    <iframe src="/chart/{{ chart.id }}/preview" id="iframe-vis" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen>
                    </iframe>
                </div>
                <div class="resize-chart-wrap">
                    <div class="resize-chart">
                        {% trans "Resize to: " %}
                        <input id="resize-w" class="input-large" type="text" value="" /> ×
                        <input id="resize-h" class="input-large" type="text" value="" />
                        (e.g. <a href="#">480×320</a>
                        <a href="#">480×480</a>
                        <a href="#">640×360</a>
                        <a href="#">640×480</a>)

                    </div>
                </div>
            </div>
        </div>


        <div class="span5 visconfig"><div class="well">
            <div class="section">
                <div class="vis-selector-unfolded">
                <h3>{% trans "Select visualization" %}</h3>
                    <div class="vis-thumbs">
                        {% for vis in visualizations %}{% if vis.title %}
                        <div class="vis-thumb{% if vis.id == chart.type %} active{% endif %}" data-id="{{ vis.id }}" data-title="{{ vis.title[language] }}"><img title="{{ vis.title[language] }}" src="/static/visualizations/{{ vis.id }}/thumb.png" /></div>
                        {% endif %}{% endfor %}
                    </div>
                </div>
                <div class="vis-selector-folded">
                    <h3><u>{% trans "Visualization:" %}</u> <span class="vis-selected"><img src="/static/visualizations/{{ chart.type }}/thumb.png" width="24" /> {{ vis.title[language] }}</span></h3>
                </div>

                <div style="margin-top:10px;margin-bottom:20px">
                    <label class="pull-left" style="line-height:28px;color:#000;font-size:18px;padding-right:1ex;font-weight:bold" for="select-theme">{% trans "Layout:" %}</label>
                    <select id="select-theme" class="span2">
                        {% for theme in themes %}{% if not theme.hidden %}
                        <option value="{{ theme.id }}">{{ theme.title }}</option>
                        {% endif %}{% endfor %}
                    </select>
                </div>
                    <p>
                        <b>{% trans "Hint" %}:</b> {% trans "In case the visualization doesn't look like you expected, you should try to <a href='#' id='btn-transpose'><i class='icon-rotate'></i> transpose the data</a>." %}
                    </p>
             </div>       

            <div class="section">
                <h3>{% trans "Tell the story" %}</h3>

                <ul class="nav nav-tabs" data-target="story">
                    <li class="active"><a href="#" data-target="story-title">{% trans "Title" %}</a></li>
                    <li><a href="#" data-target="story-intro">{% trans "Introduction" %}</a></li>
                    <li><a href="#" data-target="story-highlight">{% trans "Highlight" %}</a></li>
                </ul>

                <div class="story">
                    <div class="story-title">
                        <label for="text-title">{% trans "Tell the story in five words" %}:</label>
                        <input type="text" id="text-title" class="input-xlarge span4" />
                    </div>

                    <div class="story-intro">
                        <label for="text-intro">{% trans "Guide the audience to read the chart" %}:</label>
                        <textarea type="text" id="text-intro" class="input-xlarge span4"></textarea>
                    </div>

                    <div class="story-highlight">
                        <label>{% trans "Highlight the most import data series:" %}</label>
                        <div>
                            <select id="highlight-series" class="span2">
                                <option value="---">- {% trans "select a data series" %} -</option>
                            </select>
                        </div>
                        <p class="highlighted-series">
                            {% for series in vismeta['highlighted-series'] %}
                            <span data-series="{{ series }}" class="badge badge-info"><i class="icon-remove icon-white"></i>{{ series }}</span>
                            {% endfor %}
                        </p>
                    </div>
                </div>

                {# highlight values }

                <label>
                    <a data-toggle="collapse" data-target="#c-highlight-values" class="collapse-{% if vismeta.highlighted-values %}shown{% else %}hidden{% endif %}">Highlight values</a>
                </label>
                <div class="collapse{% if vismeta.highlighted-values %} in{% endif %}" id="c-highlight-values">
                    <div class="form-horizontal">
                        <label>Value: <input type="text" class="span1" /> <input type="text" class="span2" placeholder="comment" /></label>
                    </div>
                </div>

                {# customize tooltips }

                <label><a data-toggle="collapse" data-target="#c-tooltips">{% trans "Customize Tooltips" %}</a></label>
                <div class="collapse" id="c-tooltips">
                    <label class="control-label">{% trans "Tooltip content" %}</label>
                    <div class="controls">
                        <textarea style="width:100%" placeholder="not implemented yet"></textarea>
                    </div>
                </div>

                #}
            </div>

            {# visualization specific options #}

            <div class="section">
                <h3>{% trans "Refine the chart" %}</h3>

                <div id="vis-options" class="form-horizontal">
                    {% use 'vis-options.twig' %}
                    {{ block('visoptions') }}
                </div>
            </div>

            <a href="publish" class="submit pull-right btn btn-primary btn-lrge" id="visualize-proceed">{% trans "Publish" %} <i class="icon-chevron-right icon-white"></i></a>

            {% if debug %}

            {#

            The purpose of this section is to show a button labeled "store as test case", which
            calls the API and stores a kind of snapshot of the current chart configuration including
            data and a visual signature (or footprint if you like) for testing the chart in
            different browsers.

            It should never be visible on live instances

            #}

            <a href="#" class="snapshot btn btn-info">new test</a>
            <a href="#" class="snapshot update btn btn-info">update test</a>
            <script type="text/javascript">

            $(function() {
                var testId = DW.currentChart.get('metadata.describe.__test_id', null);
                if (!testId) $('.snapshot.update').hide();

                $('.snapshot').click(function(e) {
                    e.preventDefault();
                    var vis = $('#iframe-vis').get(0).contentWindow.vis;
                    var id = testId && $(e.target).hasClass('update') ? testId : prompt("Enter unique name for this test case..");
                    $.ajax({
                        type: 'POST',
                        url: '/api/charts/{{ chart.id }}/store_snapshot',
                        data: JSON.stringify({
                            id: id,
                            signature: vis.signature()
                        }),
                        dataType: 'json'
                    }).done(function(res) {
                        if (res.status == "ok") {
                            DW.logMessage("The test case <b>"+id+"</b> has been "+(testId && $(e.target).hasClass('update') ? 'updated.' : 'created.'), '.visconfig');
                        }
                    });
                });
            });

            </script>

            {% endif %}

            <a class="btn submit" href="describe"><i class="icon-chevron-left"></i> {% trans "Back" %}</a>

            <div class="clearfix"></div>
        </div>

    </div>
</div>



</div>


{% endblock %}