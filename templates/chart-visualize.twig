{% extends "chart-editor.twig" %}
{% block content %}

{{ parent() }}

{% set vismeta = chart.metadata.visualize %}

<script type="text/javascript" src="/static/vendor/canvg/rgbcolor.js"></script>
<script type="text/javascript" src="/static/vendor/canvg/canvg.js"></script>
<script type="text/javascript" src="/static/vendor/chromajs/chroma.min.js"></script>

{% for vis in visualizations %}
    <script type="text/javascript" src="{{ vis.__static_path }}/{{ vis.id }}.js"></script>
{% endfor %}

<script type="text/javascript">

$.extend($.easing, {
    easeInExpo: function (x, t, b, c, d) {
        return (t==0) ? b : c * Math.pow(2, 10 * (t/d - 1)) + b;
    },
    easeOutExpo: function (x, t, b, c, d) {
        return (t==d) ? b+c : c * (-Math.pow(2, -10 * t/d) + 1) + b;
    },
    easeInOutExpo: function (x, t, b, c, d) {
        if (t==0) return b;
        if (t==d) return b+c;
        if ((t/=d/2) < 1) return c/2 * Math.pow(2, 10 * (t - 1)) + b;
        return c/2 * (-Math.pow(2, -10 * --t) + 2) + b;
    }
});

$(function() {

    function classify(s) {
        s = s.replace(/[-_\s]+(.)?/g, function(match, c){ return c.toUpperCase(); });
        s = s.substr(0, 1).toUpperCase() + s.substr(1);
        return s;
    }

    $.fn.colorpicker = function(props) {
        var rt = $(this), colors, active, maxW = props.maxW || $(rt).parent().width();
        if (!rt.data('colors')) return;
        colors = rt.data('colors').toLowerCase().split(',');
        active = (rt.data('color') || "").toLowerCase();
        // clean up html at first
        rt.html('');
        rt.css({
            position: 'relative'
        });
        var c = 0, r = 0;
        $.each(colors, function(i, col) {
            if (!col) return;
            var d = $('<div />');
            if ((c+1)*28 > maxW) {
                c = 0;
                r+=1;
                rt.css('height', (r+1)*28+4);
            }
            d.css({
                position: 'absolute',
                left: c*28 - (col == active ? 1 : 0),
                top: r*28 + (col == active ? -1 : 0),
                height: 26,
                width: 26,
                cursor: 'pointer',
                background: col,
                'border-radius': col == active ? 4 : 0,
                'border-width': col == active ? 3 : 2,
                'border-style': 'solid',
                'border-color': col == active ? 'black' : 'white',
                'z-index': (col == active ? '10' : '0')
            });
            d.data('color', col);
            d.click(function(e) {
                var a = $(e.target);
                rt.data('color', a.data('color'));
                rt.colorpicker(props);
                if (props && props.change) props.change(rt.data('color'));
            });
            rt.append(d);
            c += 1;

        });
    };


    var _typeHasChanged = false,
        _themeHasChanged = false,
        _axesHaveChanged = false,
        chart = dw.backend.currentChart,
        themes = {{ themes | json | raw }},
        themesById = {},
        visMetas = {},
        iframe = $('#iframe-vis');

    {% for vis in visualizations %}
        visMetas['{{ vis.id }}'] = JSON.parse('{{ vis|json| escape("js") }}');
    {% endfor %}

    _.each(themes, function(theme) {
        themesById[theme.id] = theme;
        themesById[theme.id].__loaded = false;
    });

    function showThemeColors() {
        var themeid = $('#select-theme').val(),
            customColors = $('#palette-colors'),
            theTheme = dw.theme(themeid),
            picker = $('#select-color');
        picker.data('colors', theTheme.colors.palette.join(','));
        picker.data('color', theTheme.colors.palette[chart.get('metadata.visualize.base-color', 0)]);
        picker.colorpicker({
            maxW: $('.tab-container').width()*0.5,
            change: function(color) {
                var colIndex = theTheme.colors.palette.join(',').toLowerCase().split(',').indexOf(color.toLowerCase());
                chart.set('metadata.visualize.base-color', colIndex);
            }
        });
        chart.set('metadata.publish.background', theTheme.colors.background);
        chart.set('metadata.publish.contextBg', theTheme.colors.contextBackground);
        chart.set('metadata.publish.text', theTheme.colors.text);

        var colors = theTheme.colors.palette.slice().concat(theTheme.colors.secondary || []);
        customColors.data('colors', colors.join(','));

        $('body').trigger('dw:themes-loaded');
    }
    // show the theme colors as soon as the theme has been loaded
    //$('body').on('dw:themes-loaded', showThemeColors);


    function loadThemes() {
        var dfd = $.Deferred(),
            themeid = $('#select-theme').val(),
            theme = themesById[themeid],
            needed = [themeid];

        while (theme['extends']) {
            needed.unshift(theme['extends']);
            theme = themesById[theme['extends']];
        }
        function loadNext() {
            if (needed.length > 0) {
                var next = themesById[needed.shift()];
                if (!next.__loaded) {
                    next.__loaded = true;
                    $.getScript(next.__static_path + '/' + next.id + '.js', loadNext);
                } else {
                    loadNext();
                }
            } else {
                dfd.resolve();
                $('body').trigger('dw:themes-loaded');
            }
        }
        loadNext();
        return dfd.promise();
    } // end loadThemes()

    function loadOptions() {
        var loaded = $.Deferred();
        $('#vis-options').load(
            '/xhr/'+chart.get('id')+'/vis-options?nocache='+Math.random(),
            function() {
                setTimeout(function() {
                    loaded.resolve();
                    showThemeColors();
                }, 500);
            }
        );
        return loaded.promise();
    }

    var loadVisDfd = (function() {
        var callbacks = $.Callbacks();
        return {
            promise: function() {
                return {
                    done: function(cb) {
                        callbacks.add(cb);
                    }
                };
            },
            resolve: function() {
                callbacks.fire();
                callbacks = $.Callbacks();
            }
        };
    })();
    dw.backend.__currentVisLoaded = loadVisDfd.promise();

    /** Set into `dw.backend.currentVis` the edited visualization (editor side) */
    function loadVis() {
        dw.backend.currentVis = dw.visualization(chart.get('type'));
        dw.backend.currentVis.chart(chart);
        dw.backend.currentVis.dataset = chart.dataset().reset();
        dw.backend.currentVis.meta = visMetas[chart.get('type')];
        loadVisDfd.resolve();
        //$('#notifications').html('');
    }

    chart.onSave(function(chart) {
        if (_themeHasChanged) {
            iframe.one('load', updateVisBackground);
            _.each(themes, function(theme) {
                if (theme.id == chart.get('theme')) {
                    var w = theme.default_width || chart.get('metadata.publish.embed-width'),
                        h = theme.default_height || chart.get('metadata.publish.embed-height');
                    updateSize(w, h);
                    return false;
                }
            });
        }

        if (_typeHasChanged) {
            // remove all notifications
            $("#notifications .notification").fadeOutAndRemove();
            loadOptions().done(function() {
                loadVis();
            });
        }

        if (_themeHasChanged) {
            // load new visualization options
            loadThemes().done(function() {
                loadOptions().done(function() {
                    loadVis();
                });
            });
        }

        if (_axesHaveChanged) {
            loadOptions().done(loadVis);
        }

        _themeHasChanged = false;
        _typeHasChanged = false;
        _axesHaveChanged = false;

        var iframeWin = iframe.get(0).contentWindow;
        if (iframeWin.__dw && iframeWin.__dw.saved) {
            iframeWin.__dw.saved();
        }
        scheduleThumbnail();
        checkChartHeight();
    });

    var _thumbTimer;

    function scheduleThumbnail() {
        clearTimeout(_thumbTimer);
        _thumbTimer = setTimeout(function() {
            dw.backend.snapshot(iframe, '{{ chart.id }}', 'm', 260, 160);
        }, 500);
    }

//    chart.sync('#select-vis', 'type');
    chart.sync('#select-theme', 'theme');
    chart.sync('#text-title', 'title');
    chart.sync('#text-intro', 'metadata.describe.intro');

    chart.onChange(function(chart, key, value) {
        if (key == 'type') _typeHasChanged = true;
        if (key == 'theme') _themeHasChanged = true;
        if (key.substr(0, 13) == 'metadata.axes') _axesHaveChanged = true;
        dw.backend.updateChartInIframe(iframe, chart.attributes());
    });

    // load dataset
    function _getHighlights() {
        var sel = chart.get('metadata.visualize.highlighted-series');
        return _.isArray(sel) ? sel.slice(0) : [];
    }

    function highlightSeriesClick(e) {
        var badge = $(e.target).parents('.badge'),
            series = badge.data('series'),
            li = badge;
            selected = _getHighlights();
        selected = _.without(selected, String(series));
        chart.set('metadata.visualize.highlighted-series', selected);
        li.remove();
        e.preventDefault();
    }
    $('.highlighted-series .badge').click(highlightSeriesClick);

    function onDatasetLoaded() {
        loadVis();
        var s = $('#highlight-series'), s2 = $('.highlighted-series');
        s.find("option[value!='---']").remove();
        _.each(dw.backend.currentVis.keys(), function(key) {
            s.append('<option>'+key+'</option>');
        });
        s.change(function() {
            if (s.val() != "---") {
                var selected = _getHighlights();
                if (_.indexOf(selected, s.val()) >= 0) {
                    s.val('---');
                    return;
                }

                var span = $('<span data-series="'+s.val()+'" class="badge badge-info"><i class="icon-remove icon-white"></i>'+s.val()+'</span>');

                selected.push(s.val());

                chart.set('metadata.visualize.highlighted-series', selected);

                s2.append(span);
                span.click(highlightSeriesClick);
                s.val('---');
            }
        });
        _.each(themes, function(theme) {
            if (theme.id == chart.get('theme')) {
                var w = chart.get('metadata.publish.embed-width', theme.default_width || 560),
                    h = chart.get('metadata.publish.embed-height', theme.default_height || 400);
                updateSize(w, h);
                return false;
            }
        });
        loadThemes().done(showThemeColors);
    }

    chart.load().done(onDatasetLoaded);

    $('.collapse').on('shown', function(e) {
        var tgl = $('[data-toggle=collapse][data-target=#'+e.target.id+']');
        tgl.addClass('collapse-shown');
        tgl.removeClass('collapse-hidden');
    });

    $('.collapse').on('hidden', function(e) {
        var tgl = $('[data-toggle=collapse][data-target=#'+e.target.id+']');
        tgl.addClass('collapse-hidden');
        tgl.removeClass('collapse-shown');
    });

    var checkChartHeight = (function() {
        return function() {
            var iframe = $('#iframe-vis').contents(),
                vis_h = iframe.height(),
                vis_w = iframe.width(),
                iframe_h = $('#iframe-vis').height(),
                iframe_w = $('#iframe-vis').width();

            if (vis_h > iframe_h+5 || vis_w > iframe_w) {

                var $notification = dw.backend.notify('{{ "Watch out: Your chart needs more space. To get rid of the scrollbars just [resize iFrame to chart]" | trans | escape('js') }}'.replace('[', '<a href="#" id="resize-iframe">').replace(']', '</a>'));

                $('#resize-iframe').click(function(e) {
                    e.preventDefault();
                    if (vis_h > iframe_h) $('#resize-h').val(vis_h);
                    if (vis_w > iframe_w) $('#resize-w').val(vis_w);
                    updateSize();
                    if ($notification) $notification.fadeOutAndRemove();
                    warningShowed = false;
                });
            } else {
                if ($notification) $notification.fadeOutAndRemove();
            }
        };
    })();

    function updateVisBackground() {  // and show msg if chart needs more space
        var iframe = $('#iframe-vis').contents(),
            bgcol =  $('body', iframe).css('background-color'),
            white = bgcol == 'rgb(255, 255, 255)' || bgcol == '#ffffff' || bgcol == 'white' || bgcol == 'transparent',
            border = white ? '#ffffff' : '#bbb';

        bgcol = dw.backend.currentChart.get('metadata.publish.contextBg') || dw.backend.currentChart.get('metadata.publish.background');

        $('#iframe-wrapper').css({
            'background-color': white ? '#ffffff' : bgcol,
            'border-color': border
        });
    }

    iframe.load(function() {
        updateVisBackground();
        var win = $('#iframe-vis').get(0).contentWindow,
            chk;

        chk = setInterval(function() {  // wait a little more
            if (win.vis) {
                clearInterval(chk);
                dw.backend.initLiveUpdates(iframe);
                win.vis.rendered().done(function() {
                    checkChartHeight();
                });
            }
        }, 100);

        $(win).unload(function() {
            iframe.ready(iframeReady);
        });
    });

    function iframeReady() {
        var iframe_window = $('#iframe-vis').get(0).contentWindow;
        $(window).on('message', function(evt) {
            evt = evt.originalEvent;
            if (evt.source == iframe_window) {
                if (evt.data == 'datawrapper:vis:init') {
                    iframe_window.dw_alert = dw.backend.alert;
                    iframe_window.dw.backend = dw.backend;
                    initLiveEditing();
                }
                if (evt.data.slice(0, 7) == 'notify:') {
                    dw.backend.notify(evt.data.slice(7));
                }
            }
        });
    }

    function initLiveEditing() {
        var doc = $('#iframe-vis').get(0).contentDocument;

        $.fn.initLiveEditing = function() {
            return $(this)
            .attr('contenteditable', true)
            .off('focus').on('focus', function(evt) {
                $(evt.target).data('old-value', $(evt.target).html());
            })
            .off('keydown').on('keydown', function(evt) {
                if (evt.keyCode == 27) {
                    $(evt.target).html($(evt.target).data('old-value')).blur();
                    return;
                }
                if (evt.keyCode == 13) {
                    $(evt.target).blur();
                    evt.preventDefault();
                }
            });
        }

        $('.label[data-column][data-row] span', doc)
            .initLiveEditing()
            .off('blur').on('blur', function(evt) {
                var span = $(evt.target),
                    val = $.trim(span.html()),
                    label = span.parent(),
                    transpose = chart.get('metadata.data.transpose', false),
                    dataset = chart.dataset(),
                    column = label.data('column'),
                    row = label.data('row'),
                    c = !transpose ? dataset.indexOf(column) : 0,
                    r = !transpose ? row+1 : dataset.indexOf(column);

                if (val != '' && val != $.trim($(evt.target).data('old-value'))) {
                    var changes = chart.get('metadata.data.changes', []).slice(0),
                        change = { row: r, column: c, value: val };
                    changes.push(change);
                    chart.set('metadata.data.changes', changes);
                    dw.backend.notify('{{ "Your changes have been saved. In the [Check & Describe] step you can restore the original dataset using the <b>revert</b> button." | trans | raw }}'.replace('[', '<a href="describe">').replace(']', '</a>'));
                }
            });

        $('.chart-title', doc)
            .initLiveEditing()
            .off('blur').on('blur', function() {
                chart.set('title', $('.chart-title', doc).html());
                $('#text-title').val($('.chart-title', doc).html());
            });

        $('.chart-intro', doc)
            .initLiveEditing()
            .off('blur').on('blur', function() {
                chart.set('metadata.describe.intro', $('.chart-intro', doc).html());
                $('#text-intro').val($('.chart-intro', doc).html());
            });
    }

    iframe.ready(iframeReady);

    $('.nav-tabs').each(function(i, el) {
        var navTabs = $(el);
        $('li a', navTabs).each(function(i, el) {
            $('.'+$(el).data('target')).hide();
            $(el).click(function(e) {
                e.preventDefault();
                $('.' + navTabs.data('target') + ' > div').hide();
                $('.' + $(e.target).data('target')).show();
                $('li', navTabs).removeClass('active');
                $(e.target).parents('li').addClass('active');
            });
        });
        $('li.active a', navTabs).each(function(i, el) {
            $('.'+$(el).data('target')).show();
        });
    });

    $('#btn-transpose').click(function(e) {
        e.preventDefault();
        chart.set('metadata.data.transpose', !chart.get('metadata.data.transpose'));
        chart.load().done(onDatasetLoaded);
        setTimeout(function() {
            loadOptions();
        }, 2000);
    });

    // graphical vis selector
    var unfolded = $('.vis-selector-unfolded'),
        folded = $('.vis-selector-folded'),
        thumbs = $('.vis-thumb'),
        selVis = $('.vis-selected');
    unfolded.show().data('h', unfolded.height()).hide();
    thumbs.click(function(e) {
        var thumb = $(e.target);
        if (!thumb.hasClass('vis-thumb')) thumb = thumb.parents('.vis-thumb');
        thumbs.removeClass('active');
        thumb.addClass('active');
        selVis.html('<img src="'+thumb.data('static-path')+thumb.data('id')+'.png" width="24" />' + thumb.data('title'));
        setTimeout(function() {
            /*folded.show();
            unfolded.animate({ height: 0 }, 300, 'easeOutExpo', function() {
                unfolded.hide();
            });*/
            chart.set('type', thumb.data('id'));
        }, 100);
    });

    folded.click(function() {
        folded.hide();
        unfolded.height(0).show().animate({ height: unfolded.data('h') }, 300);
    });

    //if (dw.backend.__firstTime) {
        unfolded.show();
        folded.hide();
    //}

    // chart resizing
    var __timer;
    function _updateSize() {
        clearTimeout(__timer);
        __timer = setTimeout(updateSize, 300);
    }
    function updateSize(_w, _h) {
        var maxW = $('#iframe-wrapper').parent().parent().width()-22,
            w = _w || Math.min(Number($('#resize-w').val()) || 580, maxW),
            h = _h || Number($('#resize-h').val()) || 400;
        $('#resize-w').val(w);
        $('#resize-h').val(h);
        $('#iframe-wrapper').animate({
            width: w,
            height: h,
            'margin-left': (maxW - w) * 0.5
        }, 400, 'easeOutExpo');

        chart.set('metadata.publish.embed-width', w);
        chart.set('metadata.publish.embed-height', h);
    }
    $('.resize-chart a').click(function(e) {
        e.preventDefault();
        var dim = $(e.target).html().split('×');
        $('#resize-w').val(dim[0]);
        $('#resize-h').val(dim[1]);
        updateSize();
    });

    var cw = chart.get('metadata.publish.embed-width', $('#iframe-wrapper').width()),
        ch = chart.get('metadata.publish.embed-height', $('#iframe-wrapper').height());
    $('#resize-w').val(cw);
    $('#resize-h').val(ch);
    $('.resize-chart input').change(_updateSize);
    $('#iframe-wrapper').width(cw);
    $('#iframe-wrapper').height(ch);

});


</script>

<div class="dw-create-visualize chart-editor">

    <div class="row">
        <div class="span7">

            <div data-offset-top="100" data-offset-bottom="130">
                <div id="iframe-wrapper" style="height:500px;" >
                    <iframe src="/chart/{{ chart.id }}/preview?innersvg=1" id="iframe-vis" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen>
                    </iframe>
                </div>
                <div class="resize-chart-wrap">
                    <div class="resize-chart">
                        {% trans "Resize to: " %}
                        <input id="resize-w" class="input-large" type="text" value="" /> ×
                        <input id="resize-h" class="input-large" type="text" value="" />
                        (e.g. <a href="#">480×320</a>
                        <a href="#">480×480</a>
                        <a href="#">640×360</a>
                        <a href="#">640×480</a>)

                    </div>
                </div>
            </div>

            <div id="notifications">

            </div>

        </div>

        <ul class="span5 nav nav-tabs visualize-nav-tabs" data-target="tab-container">
            <li class="active"><a href="#vis" data-target="select-visualization">{% trans "Select chart" %}</a></li>
            <li><a href="#refine" data-target="refine-the-chart">{% trans "Refine the chart" %}</a></li>
            <li ><a href="#story" data-target="tell-the-story">{% trans "Tell the story" %}</a></li>
        </ul>

        <div class="span5 visconfig"><div class="well">

            <script type="text/javascript">
            $(function() {
                function show(a) {
                    a.tab('show');
                    $('.tab-container > *').hide();
                    $('.tab-container .'+a.data('target')).show();
                    if (a.attr('href') == '#story') {
                        $('.proceed-btn').hide();
                        $('.publish-btn').show();
                    }
                }
                $('.publish-btn').hide();
                $('.proceed-btn').click(function() {
                    var li = $('.visualize-nav-tabs li.active');
                    var a = $('a', li.next());
                    location.hash = '#'+a.data('target');
                    show(a);
                });

                $('.visualize-nav-tabs a').on('click', function (e) {
                    var a = $(e.target);
                    location.hash = '#'+a.data('target');
                    if (a.attr('href') == '#story') {
                        $('.proceed-btn').hide();
                        $('.publish-btn').show();
                    } else {
                        $('.proceed-btn').show();
                        $('.publish-btn').hide();
                    }
                });

                function loadTab(evt) {
                    if (location.hash) {
                        var a = location.hash.substr(1);
                        if (a != 'select-visualization' && a != 'refine-the-chart' && a != 'tell-the-story') {
                            return;
                        }
                        show($('a[data-target='+a+']'));
                        if (evt) evt.preventDefault();
                    }
                }

                $(window).on('hashchange', loadTab);
                loadTab();
            });

            </script>

            <div class="tab-container">

                <div class="section select-visualization">
                    <div class="vis-selector-unfolded">
                    {# <h3>{% trans "Select visualization" %}</h3> #}
                        <div class="vis-thumbs">
                            {% for vis in visualizations %}{% if vis.title %}
                            <div class="vis-thumb{% if vis.id == chart.type %} active{% endif %}" data-id="{{ vis.id }}" data-title="{{ vis.title }}" data-static-path="{{ vis.__static_path }}"><img title="{{ vis.title }}" src="{{ vis.__static_path }}{{ vis.id }}.png" /></div>
                            {% endif %}{% endfor %}
                        </div>

                    </div>
                    <div class="vis-selector-folded">
                        <h3><u>{% trans "Visualization:" %}</u> <span class="vis-selected"><img src="{{ vis.__static_path }}{{ vis.id }}.png" width="24" /> {{ vis.title }}</span></h3>

                    </div>

                        <p>
                            <b>{% trans "Hint" %}:</b> {% trans "In case the visualization doesn't look like you expected, you should try to <a href='#' id='btn-transpose'><i class='icon-rotate'></i> transpose the data</a>." %}
                        </p>


                    <div style="margin-top:20px;">
                        <label class="pull-left" style="padding-right:1ex;line-height:28px" for="select-theme">{% trans "Select layout:" %}</label>
                        <select id="select-theme" class="span2">
                            {% for theme in themes %}{% if not theme.hidden %}
                            <option value="{{ theme.id }}">{{ theme.title }}</option>
                            {% endif %}{% endfor %}
                        </select>
                    </div>

                 </div>

                <div class="section tell-the-story">
                    {# <h3>{% trans "Tell the story" %}</h3> #}

                    <div class="story">
                        <div class="story-title">
                            <label for="text-title">{% trans "Tell the story in five words" %}:</label>
                            <input type="text" id="text-title" class="input-xlarge span4" />
                        </div>

                        <div class="story-intro">
                            <label for="text-intro">{% trans "Guide the audience to read the chart" %}:</label>
                            <textarea type="text" id="text-intro" class="input-xlarge span4"></textarea>
                        </div>

                        <div class="story-highlight">
                            <label>{% trans "Highlight the most import data series:" %}</label>
                            <div>
                                <select id="highlight-series" class="span2">
                                    <option value="---">- {% trans "select a data series" %} -</option>
                                </select>
                            </div>
                            <p class="highlighted-series">
                                {% for series in vismeta['highlighted-series'] %}
                                <span data-series="{{ series }}" class="badge badge-info"><i class="icon-remove icon-white"></i>{{ series }}</span>
                                {% endfor %}
                            </p>
                        </div>
                    </div>

                    {# highlight values }

                    <label>
                        <a data-toggle="collapse" data-target="#c-highlight-values" class="collapse-{% if vismeta.highlighted-values %}shown{% else %}hidden{% endif %}">Highlight values</a>
                    </label>
                    <div class="collapse{% if vismeta.highlighted-values %} in{% endif %}" id="c-highlight-values">
                        <div class="form-horizontal">
                            <label>Value: <input type="text" class="span1" /> <input type="text" class="span2" placeholder="comment" /></label>
                        </div>
                    </div>

                    {# customize tooltips }

                    <label><a data-toggle="collapse" data-target="#c-tooltips">{% trans "Customize Tooltips" %}</a></label>
                    <div class="collapse" id="c-tooltips">
                        <label class="control-label">{% trans "Tooltip content" %}</label>
                        <div class="controls">
                            <textarea style="width:100%" placeholder="not implemented yet"></textarea>
                        </div>
                    </div>

                    #}
                </div>

                {# visualization specific options #}

                <div class="section refine-the-chart">
                    {# <h3>{% trans "Refine the chart" %}</h3> #}

                    <div id="vis-options" class="form-horizontal">
                        {% use 'chart-visualize-options.twig' %}
                        {{ block('visoptions') }}
                    </div>
                </div>
            </div>

            <a href="#proceed" class="pull-right btn btn proceed-btn">{% trans "Proceed" %} <i class="icon-chevron-right"></i></a>
            <a href="publish" class="submit pull-right btn btn-primary btn-lrge publish-btn" id="visualize-proceed">{% trans "Publish" %} <i class="icon-chevron-right icon-white"></i></a>

            {% if debug %}

            {#

            The purpose of this section is to show a button labeled "store as test case", which
            calls the API and stores a kind of snapshot of the current chart configuration including
            data and a visual signature (or footprint if you like) for testing the chart in
            different browsers.

            It should never be visible on live instances

            #}

            <a href="#" class="snapshot btn btn-info">new test</a>
            <a href="#" class="snapshot update btn btn-info">update test</a>
            <script type="text/javascript">

            $(function() {
                var testId = dw.backend.currentChart.get('metadata.describe.__test_id', null);
                if (!testId) $('.snapshot.update').hide();

                $('.snapshot').click(function(e) {
                    e.preventDefault();
                    var vis = $('#iframe-vis').get(0).contentWindow.vis;
                    var id = testId && $(e.target).hasClass('update') ? testId : prompt("Enter unique name for this test case..");
                    $.ajax({
                        type: 'POST',
                        url: '/api/charts/{{ chart.id }}/store_snapshot',
                        data: JSON.stringify({
                            id: id,
                            signature: vis.signature()
                        }),
                        dataType: 'json'
                    }).done(function(res) {
                        if (res.status == "ok") {
                            dw.backend.logMessage("The test case <b>"+id+"</b> has been "+(testId && $(e.target).hasClass('update') ? 'updated.' : 'created.'), '.visconfig');
                        }
                    });
                });
            });

            </script>

            {% endif %}

            <a class="btn submit" href="describe"><i class="icon-chevron-left"></i> {% trans "Back" %}</a>

            <div class="clearfix"></div>
        </div>

    </div>
</div>



</div>


{% endblock %}