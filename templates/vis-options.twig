{% block visoptions %}

<fieldset>

    <div class="control-group select-color">
        <label class="control-label" for="select-color">{% trans "Choose a base color" %}</label>
        <div class="controls">
            <div id="select-color"></div>
        </div>
    </div>

    <div class="control-group">
        <label class="control-label"></label>
        <div class="controls">
            <a class="btn btn-small" role="button" href="#customColors">{% trans "or define custom colors" %}</a>
        </div>
    </div>

    {% if vis.dimensions == 1 %}
    <div class="control-group select-row">
        <label class="control-label" for="text-title">{% trans "Initial row to display" %}</label>
        <div class="controls">
            <select id="select-row" style="width:100%">
            </select>
        </div>
    </div>
    {% endif %}



    {% for key, option in vis.options %}
        {% if theme['option-filter'][vis.id][key] or (not option.hidden and not option.expert)  %}
    <div class="control-group" style="margin-bottom:0px" id="vis-options-{{ key }}">
        {% if option.type == 'checkbox' %}
            <label class="control-label" for="{{ key }}">{{ option.label[language]|raw }}</label>
            <div class="controls">
                <input type="checkbox" id="{{ key }}" />
            </div>

        {% elseif option.type == 'select' %}

            <label class="control-label" for="{{ key }}">{{ option.label[language]|raw }}</label>
            <div class="controls">
                <select id="{{ key }}">
                    {% for opt in option.options %}
                    <option value="{{ opt.value }}">{{ opt.label[language] }}</option>
                    {% endfor %}
                </select>
            </div>

        {% elseif option.type == 'radio' %}

            <label class="control-label"  for="{{ key }}">{{ option.label[language]|raw }}</label>
            <div class="controls form-inline">
                {% for opt in option.options %}
                <div><label class="radio"><input type="radio" name="{{ key }}" value="{{ opt.value }}" {% if opt.default %}checked="checked" {% endif %}/>&nbsp;{{ opt.label[language] }}</label></div>
                {% endfor %}
            </div>

        {% elseif option.type == 'text' %}

            <label class="control-label"  for="{{ key }}">{{ option.label[language]|raw }}</label>
            <div class="controls form-inline">
                <input type="text" style="width:auto" id="{{ key }}" value="" />
            </div>

        {% else %}
            <p>Unhandled option type {{ option.type }}</p>
        {% endif %}
    </div>
    {% endif %}{% endfor %}
</fieldset>

{#
    modal for picking custom colors
#}
<div class="modal hide" id="customColors" style="width:620px;margin-left:-310px" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-body">
        <button type="button" class="close" data-dismiss="modal">×</button>
        <p class="lead">{% trans "Customize chart colors" %}</p>
        <p style="border-bottom:1px solid #ccc;padding-bottom:20px;margin-bottom:20px">{% trans "Please use custom colors only if it is absolutely necessary, for instance to identify political parties. If possible please use the palette colors." %}</p>

        <div class="row">
            <div class="span2">
                <div>
                    <h4>{% trans "1. Select data series" %}</h4>
                    <ul class="dataseries unstyled">
                    </ul>
                </div>
            </div>
            <div class="span4">
                <div>
                    <h4>{% trans "2. Choose a color for" %} "<span class="selected-series-name"></span>"</h4>
                </div>
                <div class="row">
                    <div class="span2">
                        <label>{% trans "Pick from palette..." %}</label>
                        <div id="palette-colors"></div>
                    </div>
                    <div class="span2">
                        <label>{% trans "...or enter a custom color" %}</label>
                        <div class="control-group">
                            <input id="user-color" type="text" class="text input-small" placeholder="FF0000" />
                        </div>
                    </div>
                </div>
                <div style="margin-top:20px">
                    <button id="reset-color-choice" class="btn">{% trans "Reset color (use default)" %}</button>
                </div>
            </div>
        </div>

    </div>
    <div class="modal-footer">
        <button id="reset-all-colors" class="btn pull-left">{% trans "Reset all colors" %}</button>
        <button class="btn btn-primary" data-dismiss="modal">{% trans "Close" %}</button>
    </div>
</div>
<style type="text/css">

#customColors h4 {
    margin: 0 0 20px;
    font-size: 15px;
    font-weight: normal;
}

#customColors .color {
    width: 17px;
    height: 17px;
    float: left;
    background: #ccc;
    text-align: center;
    line-height: 14px;
    color: #fff;
    font-size: 20px;
    font-weight: bold;
}

#customColors .dataseries li {
    padding-left: 5px;
    padding-bottom: 3px;
    cursor: pointer;
}

#customColors .dataseries label {
    padding-left: 25px;
    line-height: 17px;
    color: #999;
}

#customColors .dataseries .selected label {
    font-weight: bold;
    color: #000;
}


</style>
<script type="text/javascript">

$(function() {
    var chart = DW.currentChart;

    function syncVisOptions(vis) {
        _.each(vis.options, function(opt, key) {
            if (chart.get('metadata.visualize.'+key) == undefined){
                chart.set('metadata.visualize.'+key, opt.default);
            }
            if (opt.type == 'radio') {
                chart.sync('input[name='+key+']', 'metadata.visualize.'+key);
            } else {
                chart.sync('#'+key, 'metadata.visualize.'+key);
            }
        });
        // check visibility of each option (evaluate "depends-on" property)
        function checkDepends() {
            _.each(vis.options, function(opt, key) {
                if (opt['depends-on'] !== undefined) {
                    var visible = true;
                    // special conditions:
                    _.each(opt['depends-on'], function(val, key) {
                        if (key == 'chart.min_series_num') {
                            visible = visible && chart.dataSeries().length >= +val;
                        } else if (key == 'chart.max_series_num') {
                            visible = visible && chart.dataSeries().length <= +val;
                        } else if (key == 'chart.missing_values') {
                            visible = visible && chart.hasMissingValues() == val;
                        } else if (key == 'chart.min_row_num') {
                            visible = visible && chart.numRows() >= +val;
                        }  else if (key == 'chart.max_row_num') {
                            visible = visible && chart.numRows() <= +val;
                        } else {
                            visible = visible && chart.get('metadata.visualize.'+key) == val;
                        }
                    });
                    if (visible) $('#vis-options-'+key).show();
                    else $('#vis-options-'+key).hide()
                }
            });
        }
        checkDepends();
        chart.onChange(checkDepends);
    };

    // initial visualization meta
    var vis = JSON.parse('{{ vis|json|raw }}');

    chart.datasetLoaded(function(chart) {

        syncVisOptions(vis);

        // populate select-row
        if (vis.dimensions == 1) {
            if (chart.numRows() > 1) {
                var selRows = $('#select-row');
                for (var r=0; r<chart.numRows(); r++) {
                    selRows.append('<option value="'+r+'">'+chart.rowLabel(r)+'</option>');
                }
                chart.sync('#select-row', 'metadata.visualize.selected-row');
            } else {
                $('.select-row').hide();
            }
        }

        initCustomColors(chart);

    });

    function initCustomColors(chart) {

        var customColors = $('#customColors'),
            sel = chart.get('metadata.visualize.custom-colors', {});
            labels = [];

        if (vis['color-by'] && vis['color-by'] == 'row') {
            $.each(chart.rowLabels(), function(i, n) { labels.push(n); });
        } else if (vis['color-by'] && vis['color-by'] == 'hierarchy') {
            var tree = chart.__dataset.parseTree(0);
            function visitNode(n) {
                if (n.name) labels.push([n.name, $.trim(_.range(n.depth-1).map(function() { return '...'; }).join('')+' '+n.name)]);
                _.each(n.children, visitNode);
            }
            visitNode(tree);
        } else {
            $.each(chart.dataSeries(), function(i, ds) { labels.push(ds.name); });
        }

        // populate custom color selector
        $.each(labels, function(i, lbl) {
            var s = lbl;
            if (_.isArray(lbl)) {
                s = lbl[0];
                lbl = lbl[1];
            }
            var li = $('<li data-series="'+s+'"></li>');
            li.append('<div class="color">×</div><label>'+lbl+'</label>');
            if (sel[s]) {
                $('.color', li).html('').css('background', sel[s]);
                li.data('color', sel[s]);
            }
            $('#customColors .dataseries').append(li);
        });
        // auto-select first series
        $('#customColors .dataseries li:first-child').addClass('selected');
        $('#customColors .selected-series-name').html(_.isArray(labels[0]) ? labels[0][1] : labels[0]);

        // define select event handler
        $('#customColors .dataseries li').click(function(e) {
            var li = e.target.nodeName.toLowerCase() == 'li' ? $(e.target) : $(e.target).parents('li');
            $('#customColors .dataseries li').removeClass('selected');
            $('#customColors .selected-series-name').html(li.data('series'));
            li.addClass('selected');
            customColorSelectSeries();
        });

    }

    // action for "reset all colors" button
    $('#reset-color-choice').click(function(e) {
        var li = $('#customColors .dataseries li.selected');
        li.data('color', '');
        $('.color', li)
            .css('background', '')
            .html('×');
        var sel = $.extend({}, chart.get('metadata.visualize.custom-colors', {}));
        sel[li.data('series')] = '';
        chart.set('metadata.visualize.custom-colors', sel);
    });

    // called whenever the user selects a new series
    function customColorSelectSeries() {
        var li = $('#customColors .dataseries li.selected');
        var palette = $('#palette-colors').data('colors').split(',');
        if (palette.indexOf(li.data('color')) < 0) $('#user-color').val(li.data('color'));
        else $('#user-color').val('');

        $('#palette-colors')
          .data('color', li.data('color'))
          .colorpicker({
            change: function(color) {
                $('#user-color').val('');
                setNewColorForCurrentSeries(color);
            }
        });
    }

    // set a new color and save
    function setNewColorForCurrentSeries(color) {
        var sel = $.extend({}, chart.get('metadata.visualize.custom-colors', {})),
            li = $('#customColors .dataseries li.selected');
        $('.color', li)
            .css('background', color)
            .html('');
        li.data('color', color);
        sel[li.data('series')] = color;
        chart.set('metadata.visualize.custom-colors', sel);
    }

    // init custom colors button
    $('a[href=#customColors]').click(function(e) {
        e.preventDefault();
        $('#customColors').modal();
        customColorSelectSeries();
    });

    $('#reset-all-colors').click(function(e) {
        $('#customColors .dataseries li .color').html('×').css('background', '');
        $('#customColors .dataseries li').data('color', '');
        chart.set('metadata.visualize.custom-colors', {});
    });

    // user-defined hex-color
    var usercolor = $('#user-color');
    usercolor.keyup(function() {
        var col = usercolor.val();
        if (col.trim() == '') {
            usercolor.parent().removeClass('error').removeClass('success');
        } else if (!col.trim().match(/#[A-F|0-9]{6}/i)) {
            usercolor.parent().removeClass('success').addClass('error');
        } else {
            usercolor.parent().removeClass('error').addClass('success');
            setNewColorForCurrentSeries(col.trim());
        }
    });

});

</script>


{% endblock %}