import { Clock, Timestamp, Timestamps } from './Clock.js';
import { BaseJsonCRDT } from './BaseJsonCRDT.js';
import type { CRDT, Diff, Update } from './CRDT.js';
import isEmpty from 'lodash/isEmpty.js';

/*
CRDT implementation using a single counter to track updates.
This version has two methods, `applyUpdate` and `createUpdate`, which are used to update the data.
The counter is part of the class and is incremented everytime we create or apply an update.
*/
export class JsonCRDT<O extends object> implements CRDT<O> {
    private clock: Clock;
    private crdt: BaseJsonCRDT<O>;

    constructor(nodeId: number, data: O, timestamps?: Timestamps<O>) {
        this.crdt = new BaseJsonCRDT(data, timestamps);
        const counter = isEmpty(timestamps) ? 0 : Clock.max(timestamps).count;
        this.clock = new Clock(nodeId, counter);
    }

    /**
     * Apply an update to the CRDT. An update consists of a data diff and a timestamp.
     * @param update.diff The data diff to apply
     * @param update.timestamp The timestamp associated with the data diff
     */
    applyUpdate(update: Update) {
        const { diff, timestamp } = update;
        this.clock.update(timestamp);
        this.crdt.update(diff, timestamp);
    }

    /**
     * Applies the provided data diff to the CRDT and returns an update containing the diff and the associated timestamp.
     * The timestamp is generated by the incrementing the internal logical clock.
     * @param data The data diff to apply
     * @returns An update object that contains the applied data diff and the associated timestamp
     */
    createUpdate(diff: Diff): Update {
        const timestamp = this.clock.tick();
        this.crdt.update(diff, timestamp);
        return { diff, timestamp };
    }

    calculateDiff(
        newData: O,
        options?: {
            allowedKeys: null | (keyof object)[];
        }
    ): Diff {
        return BaseJsonCRDT.calculateDiff(this.crdt.data(), newData, options);
    }

    data(): O {
        return this.crdt.data();
    }

    timestamps(): Timestamps<O> {
        return this.crdt.timestamps();
    }

    timestamp(): Timestamp {
        return this.clock.timestamp;
    }

    counter(): number {
        return this.clock.count;
    }

    logs() {
        return this.crdt.logs();
    }
}
