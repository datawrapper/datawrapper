{
  "version": 3,
  "file": "hot.css",
  "sources": [
    "../../../../../src/controls/hot/Handsontable.html"
  ],
  "sourcesContent": [
    "<div id=\"data-preview\" ref:hot />\n\n<script>\n    /* global dw,chart */\n    import HOT from 'Handsontable';\n    import getCellRenderer from './getCellRenderer';\n    // import cellHeaderClick from './cellHeaderClick';\n    import clone from '@datawrapper/shared/clone';\n\n    let app = null;\n\n    export default {\n        data() {\n            return {\n                hot: null,\n                data: '',\n                readonly: false,\n                skipRows: 0,\n                firstRowIsHeader: true,\n                fixedColumnsLeft: 0,\n                searchIndex: 0,\n                sortBy: '-',\n                transpose: false,\n                activeColumn: null,\n                search: '',\n                searchResults: []\n            };\n        },\n        computed: {\n            currentResult({ searchResults, searchIndex }) {\n                if (!searchResults || !searchResults.length) return null;\n                const l = searchResults.length;\n                if (searchIndex < 0 || searchIndex >= l) {\n                    while (searchIndex < 0) searchIndex += l;\n                    if (searchIndex > l) searchIndex %= l;\n                }\n                return searchResults[searchIndex];\n            },\n            searchResults({ search, hot }) {\n                if (!hot || !search) return [];\n                return hot.search.query(search);\n            }\n        },\n        methods: {\n            render() {\n                const { hot } = this.get();\n                hot.render();\n            },\n            update() {\n                const { data, transpose, firstRowIsHeader, skipRows, hot } = this.get();\n\n                if (!data) return;\n\n                // get chart\n                const chart = this.store.get('dw_chart');\n\n                // pass dataset through chart to apply changes and computed columns\n                const ds = chart\n                    .dataset(\n                        dw.datasource\n                            .delimited({\n                                csv: data,\n                                transpose,\n                                firstRowIsHeader,\n                                skipRows\n                            })\n                            .parse()\n                    )\n                    .dataset();\n\n                this.set({ columnOrder: ds.columnOrder() });\n\n                // construct HoT data array\n                const hotData = [[]];\n                ds.eachColumn(c => hotData[0].push(c.title()));\n\n                ds.eachRow(r => {\n                    const row = [];\n                    ds.eachColumn(col => row.push(col.raw(r)));\n                    hotData.push(row);\n                });\n\n                // pass data to hot\n                hot.loadData(hotData);\n\n                const cellRenderer = getCellRenderer(this, chart, ds, HOT, {});\n\n                hot.updateSettings({\n                    cells: (row, col) => {\n                        const { readonly } = this.get();\n                        return {\n                            readOnly: readonly || (ds.hasColumn(col) && ds.column(col).isComputed && row === 0),\n                            renderer: cellRenderer\n                        };\n                    },\n                    manualColumnMove: []\n                });\n\n                this.set({ ds });\n                this.set({ has_changes: clone(chart.get('metadata.data.changes', [])).length > 0 });\n\n                HOT.hooks.once('afterRender', () => this.initCustomEvents());\n                hot.render();\n            },\n            dataChanged(cells) {\n                const { hot } = this.get();\n                let changed = false;\n                cells.forEach(([row, col, oldValue, newValue]) => {\n                    if (oldValue !== newValue) {\n                        const chart = this.store.get('dw_chart');\n                        const { transpose } = this.get();\n                        const changes = clone(chart.get('metadata.data.changes', []));\n                        row = hot.toPhysicalRow(row);\n                        col = chart.dataset().columnOrder()[col];\n                        if (transpose) {\n                            // swap row and col\n                            const tmp = row;\n                            row = col;\n                            col = tmp;\n                        }\n                        // store new change\n                        changes.push({\n                            column: col,\n                            row,\n                            value: newValue,\n                            previous: oldValue,\n                            time: new Date().getTime()\n                        });\n                        chart.set('metadata.data.changes', changes);\n                        changed = true;\n                    }\n                });\n                if (changed) {\n                    setTimeout(() => {\n                        this.update();\n                        chart.save();\n                    }, 100);\n                }\n            },\n            columnMoved(srcColumns, tgtIndex) {\n                const { hot } = this.get();\n                if (!srcColumns.length) return;\n                const { columnOrder } = this.get();\n                const newOrder = columnOrder.slice(0);\n                const after = columnOrder[tgtIndex];\n                const elements = newOrder.splice(srcColumns[0], srcColumns.length);\n                const insertAt = after === undefined ? newOrder.length : after ? newOrder.indexOf(after) : 0;\n                newOrder.splice(insertAt, 0, ...elements);\n                this.store.get('dw_chart').set('metadata.data.column-order', newOrder.slice(0));\n                this.set({ columnOrder: newOrder });\n                // update selection\n                HOT.hooks.once('afterRender', () => {\n                    setTimeout(() => {\n                        this.fire('resetSort');\n                        hot.selectCell(0, insertAt, hot.countRows() - 1, insertAt + elements.length - 1);\n                    }, 10);\n                });\n                this.update();\n            },\n            updateHeight() {\n                const h = document.querySelector('.ht_master.handsontable .wtHolder .wtHider').getBoundingClientRect().height;\n                this.refs.hot.style.height = Math.min(500, h + 10) + 'px';\n            },\n            checkRange(r, c, r2, c2) {\n                // check if\n                // 1. only a single column is selected, and\n                // 2. the range starts at the first row, and\n                // 3. the range extends through he last row\n                const { hot } = this.get();\n                const { ds } = this.get();\n\n                if (c === c2 && r === 0 && r2 === hot.countRows() - 1) {\n                    // const chart = this.store.get('dw_chart');\n                    // this.set({activeColumn: chart.dataset().column(c)});\n                    return;\n                }\n                if (c !== c2 && r === 0 && r2 === hot.countRows() - 1) {\n                    const sel = [];\n                    for (let i = Math.min(c, c2); i <= Math.max(c, c2); i++) {\n                        sel.push(+document.querySelector(`#data-preview .htCore tbody tr:first-child td:nth-child(${i + 2})`).dataset.column);\n                    }\n                    this.set({ multiSelection: sel.map(i => ds.column(i)), activeColumn: null });\n                    return;\n                }\n                this.set({ activeColumn: null, multiSelection: false });\n            },\n            initCustomEvents() {\n                // wait a bit to make sure HoT is rendered\n                setTimeout(() => {\n                    // catch click events on A,B,C,D... header row\n                    this.refs.hot.querySelectorAll('.htCore thead th:first-child').forEach(th => {\n                        th.removeEventListener('click', topLeftCornerClick);\n                        th.addEventListener('click', topLeftCornerClick);\n                    });\n                    // const cellHeaderClickHandler = cellHeaderClick(app);\n                    this.refs.hot.querySelectorAll('.htCore thead th+th').forEach(th => {\n                        th.removeEventListener('click', cellHeaderClick);\n                        th.addEventListener('click', cellHeaderClick);\n                    });\n                }, 500);\n            },\n\n            getColumnFormat(name) {\n                const chart = this.store.get('dw_chart');\n                const colFormats = chart.get('metadata.data.column-format', {});\n                return colFormats[name] || { type: 'auto', ignore: false };\n            }\n        },\n\n        oncreate() {\n            app = this;\n            HOT.hooks.once('afterRender', () => this.initCustomEvents());\n\n            window.addEventListener('keyup', evt => {\n                const { activeColumn, ds } = this.get();\n                if (!activeColumn) return;\n\n                if (evt.target.tagName.toLowerCase() === 'input' || evt.target.tagName.toLowerCase() === 'textarea') return;\n\n                if (evt.key === 'ArrowRight' || evt.key === 'ArrowLeft') {\n                    evt.preventDefault();\n                    evt.stopPropagation();\n                    const currentIndex = ds.indexOf(activeColumn.name());\n                    if (evt.key === 'ArrowRight') {\n                        // select next column\n                        this.set({ activeColumn: ds.column((currentIndex + 1) % ds.numColumns()) });\n                    } else {\n                        // select prev column\n                        this.set({\n                            activeColumn: ds.column((currentIndex - 1 + ds.numColumns()) % ds.numColumns())\n                        });\n                    }\n                }\n            });\n\n            const chart = this.store.get('dw_chart');\n\n            const hot = new HOT(this.refs.hot, {\n                data: [],\n                rowHeaders: i => {\n                    const ti = hot.getPlugin('ColumnSorting').translateRow(i);\n                    return ti + 1;\n                },\n                colHeaders: true,\n                fixedRowsTop: 1,\n                fixedColumnsLeft: this.get('fixedColumnsLeft'),\n                filters: true,\n                dropdownMenu: true,\n                startRows: 13,\n                startCols: 8,\n                fillHandle: false,\n                stretchH: 'all',\n                height: 500,\n                manualColumnMove: true,\n                selectionMode: 'range',\n                autoColumnSize: { useHeaders: true, syncLimit: 5 },\n                // comments: true,\n                // contextMenu: true,\n\n                // sorting\n                columnSorting: true,\n                sortIndicator: true,\n                sortFunction: function(sortOrder, columnMeta) {\n                    if (columnMeta.col > -1) {\n                        var column = chart.dataset().column(columnMeta.col);\n                        var colType = column.type();\n                        var plugin = hot.getPlugin('columnSorting');\n                        return function(a, b) {\n                            var sortFunction;\n                            if (a[0] === 0) return -1;\n                            // replace with values\n                            a[1] = column.val(a[0] - 1);\n                            b[1] = column.val(b[0] - 1);\n                            if (colType === 'number') {\n                                // sort NaNs at bottom\n                                if (isNaN(a[1])) a[1] = !sortOrder ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;\n                                if (isNaN(b[1])) b[1] = !sortOrder ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;\n                            }\n                            if (colType === 'date') {\n                                if (typeof a[1] === 'string') a[1] = new Date(110, 0, 1);\n                                if (typeof b[1] === 'string') b[1] = new Date(110, 0, 1);\n                            }\n                            switch (colType) {\n                                case 'date':\n                                    sortFunction = plugin.dateSort;\n                                    break;\n                                case 'number':\n                                    sortFunction = plugin.numericSort;\n                                    break;\n                                default:\n                                    sortFunction = plugin.defaultSort;\n                            }\n                            return sortFunction(sortOrder, columnMeta)(a, b);\n                        };\n                    }\n                    return (a, b) => a[0] - b[0];\n                },\n                afterGetColHeader: (col, th) => {\n                    const { activeColumn, ds } = this.get();\n                    if (!ds || !ds.hasColumn(col)) return;\n                    if ((col === 0 || col) && activeColumn && ds.column(col).name() === activeColumn.name()) {\n                        th.classList.add('selected');\n                    }\n\n                    if (col === 0 || col) {\n                        if (this.getColumnFormat(ds.column(col).name()).ignore) {\n                            th.classList.add('ignored');\n                        } else {\n                            th.classList.remove('ignored');\n                        }\n                    }\n                },\n                // search\n                search: 'search'\n            });\n\n            window.HT = hot;\n            this.set({ hot });\n\n            HOT.hooks.add('afterSetDataAtCell', a => this.dataChanged(a));\n            HOT.hooks.add('afterColumnMove', (a, b) => this.columnMoved(a, b));\n            HOT.hooks.add('afterRender', () => this.updateHeight());\n            HOT.hooks.add('afterSelection', (r, c, r2, c2) => this.checkRange(r, c, r2, c2));\n        },\n\n        onstate({ changed, current, previous }) {\n            const hot = current.hot;\n            if (!hot) return;\n\n            if (changed.data) {\n                this.update();\n            }\n            if (changed.firstRowIsHeader && previous && previous.firstRowIsHeader !== undefined) {\n                this.update();\n            }\n            if (changed.hot) {\n                this.update();\n            }\n            if (changed.search && previous) {\n                this.set({ searchIndex: 0 });\n            }\n\n            if (changed.searchResults) {\n                hot.render();\n            }\n            if (changed.currentResult && current.currentResult) {\n                hot.render();\n                const res = current.currentResult;\n                hot.scrollViewportTo(res.row, res.col);\n                setTimeout(() => {\n                    // one more time\n                    hot.scrollViewportTo(res.row, res.col);\n                }, 100);\n            }\n            if (changed.activeColumn) {\n                setTimeout(() => hot.render(), 10);\n            }\n            if (changed.fixedColumnsLeft) {\n                hot.updateSettings({ fixedColumnsLeft: current.fixedColumnsLeft });\n            }\n            if (changed.sorting) {\n                hot.sort(chart.dataset().indexOf(current.sorting.sortBy), current.sorting.sortDir);\n            }\n        }\n    };\n\n    function cellHeaderClick(evt) {\n        const th = this;\n        // reset the HoT selection\n        // find out which data column we're in\n        const k = th.parentNode.children.length;\n        let thIndex = -1;\n        // (stupid HTMLCollection has no indexOf)\n        for (let i = 0; i < k; i++) {\n            if (th.parentNode.children.item(i) === th) {\n                thIndex = i;\n                break;\n            }\n        }\n        // find column index\n        const colIndex = +app.refs.hot.querySelector(`.htCore tbody tr:first-child td:nth-child(${thIndex + 1})`).dataset.column;\n        const chart = app.store.get('dw_chart');\n        const { activeColumn, hot } = app.get();\n        if (chart.dataset().hasColumn(colIndex)) {\n            const newActive = chart.dataset().column(+colIndex);\n            // set active column (or unset if it's already set)\n            if (activeColumn && activeColumn.name() === newActive.name()) {\n                evt.target.parentNode.classList.remove('selected');\n                app.set({ activeColumn: false });\n                hot.deselectCell();\n            } else {\n                evt.target.parentNode.classList.add('selected');\n                app.set({ activeColumn: newActive });\n            }\n        }\n    }\n\n    function topLeftCornerClick(evt) {\n        evt.preventDefault();\n        const { transpose } = app.get();\n        app.set({ transpose: !transpose });\n        app.update();\n    }\n</script>\n\n<style>:global(#data-preview) {\n  width: 770px;\n  /*height: 400px;*/\n  overflow: auto;\n}\n:global(#data-preview) tr td,\n:global(#data-preview) tr th {\n  font-family: 'Roboto Mono', fixed;\n  font-size: 12px;\n}\n:global(#data-preview) colgroup col {\n  max-width: 500px !important;\n}\n:global(#data-preview) tr td {\n  padding: 3px 6px;\n}\n:global(#data-preview) tr td.textType {\n  color: #000000;\n}\n:global(#data-preview) tr td.dateType {\n  color: #39a832;\n  text-align: center;\n}\n:global(#data-preview) tr td.numberType {\n  color: #297ea8;\n  text-align: right;\n}\n:global(#data-preview) tr td.parsingError {\n  background: #fee;\n  color: #c00;\n}\n:global(#data-preview) tr td.readOnly.firstRow {\n  background: #eaeaea;\n  border-right-color: #aaa;\n  color: #777;\n}\n:global(#data-preview) tr td.active {\n  background: #e8f6fa;\n}\n:global(#data-preview) tr td.active.firstRow {\n  background: #d5e3e7;\n}\n:global(#data-preview) tr td.changed {\n  position: relative;\n}\n:global(#data-preview) tr td.changed:after {\n  content: ' ';\n  width: 0;\n  height: 0;\n  border-top: 7px solid orange;\n  border-right: 7px solid transparent;\n  display: block;\n  position: absolute;\n  left: 0;\n  top: 0;\n}\n:global(#data-preview) tr td.htSearchResult {\n  /*background: #ffd;*/\n  background: #fff8ef;\n  color: #8d6833 !important;\n}\n:global(#data-preview) tr td.htCurrentSearchResult {\n  color: #583707 !important;\n  background: #fcedd9;\n  /*background: #fffe83;*/\n}\n:global(#data-preview) thead th {\n  cursor: pointer;\n  background: #eee;\n  border-right: 1px solid hsl(0, 0%, 70%);\n}\n:global(#data-preview) thead th:first-child .cornerHeader:after {\n  display: block;\n  content: '';\n  width: 12px;\n  height: 12px;\n  background-image: url(/static/css/chart-editor/transpose.png);\n  background-size: contain;\n  position: absolute;\n  top: calc(50% - 6px);\n  left: calc(50% - 6px);\n}\n:global(#data-preview) thead th.selected {\n  background: #18a1cd;\n  color: white;\n  font-weight: bold;\n}\n:global(#data-preview) thead th:hover {\n  background: #ddd;\n}\n:global(#data-preview) thead th.selected:hover {\n  background: #18a1cd;\n}\n:global(#data-preview) thead tr th + th div:after {\n  position: absolute;\n  top: 3px;\n  right: 5px;\n}\n:global(#data-preview) thead th + th.selected div:after {\n  opacity: 1;\n}\n:global(#data-preview) td.ignored,\n:global(#data-preview) th.ignored {\n  color: #aaa !important;\n  text-decoration: line-through;\n  background-color: #f4f4f4;\n  /*&.area { background: #dce5f7; }*/\n}\n:global(#data-preview) td.ignored.firstRow,\n:global(#data-preview) th.ignored.firstRow {\n  background-color: #ddd;\n}\n:global(#data-preview) td.ignored.firstRow.area,\n:global(#data-preview) th.ignored.firstRow.area {\n  background: #d4ddee;\n}\n:global(#data-preview) th.ignored {\n  background-color: #e2e2e2;\n  color: #aaa;\n  text-decoration: line-through;\n}\n:global(#data-preview) tbody tr:first-child td {\n  background: #f3f3f3;\n  font-weight: bold;\n  border-bottom: 1px solid #999;\n}\n:global(#data-preview) .htCommentCell:after {\n  border-left: 8px solid transparent;\n  border-top: 8px solid orange;\n}\n:global(#data-preview) .handsontable td.area-1::before,\n:global(#data-preview) .handsontable td.area-2::before,\n:global(#data-preview) .handsontable td.area-3::before,\n:global(#data-preview) .handsontable td.area-4::before,\n:global(#data-preview) .handsontable td.area-5::before,\n:global(#data-preview) .handsontable td.area-6::before,\n:global(#data-preview) .handsontable td.area-7::before,\n:global(#data-preview) .handsontable td.area::before {\n  background: #18a1cd;\n}\n:global(#data-preview) .handsontable .columnSorting {\n  pointer-events: none;\n}\n:global(#data-preview) .handsontable .columnSorting.ascending::after {\n  font: normal normal normal 14px/1 FontAwesome;\n  content: '\\f160';\n  top: 0px;\n  right: -17px;\n}\n:global(#data-preview) .handsontable .columnSorting.descending::after {\n  font: normal normal normal 14px/1 FontAwesome;\n  content: '\\f161';\n  top: 0px;\n  right: -17px;\n}\n:global(#data-preview) .handsontable .selected .columnSorting::after {\n  color: white;\n}\n</style>\n"
  ],
  "names": [],
  "mappings": "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"
}