{
  "version": 3,
  "file": "upload.css",
  "sources": [
    "../../../../src/upload/App.html",
    "../../../../src/upload/SelectSheet.html",
    "../../../../src/upload/UploadHelp.html",
    "../../../../src/upload/TextAreaUpload.html"
  ],
  "sourcesContent": [
    "<div\n    class=\"chart-editor dw-create-upload upload-data\"\n    on:drop=\"onFileDrop(event)\"\n    on:dragover=\"dragStart(event)\"\n    on:dragenter=\"dragStart(event)\"\n    on:dragend=\"resetDrag()\"\n    on:dragleave=\"resetDrag()\"\n>\n    {#if dragover}\n    <div class=\"draginfo\">\n        {@html __('upload / drag-csv-here')}\n    </div>\n    {/if}\n\n    <!-- prettier-ignore -->\n    <div class=\"row\" style=\"{ dragover?'opacity: 0.5;filter:blur(6px);background:white;pointer-events:none': '' }\">\n        <div class=\"span5\">\n            <div class=\"sidebar\">\n                <h3>{@html __('upload / title')}</h3>\n\n                <ul class=\"import-methods\">\n                    {#each buttons as btn}\n                    <li on:click=\"btnAction(btn)\" class=\"action {active==btn?'active':''}\">\n                        <label>\n                            {#if btn.isFileUpload}\n                            <input\n                                accept=\".csv, .tsv, .txt, .xlsx, .xls, .ods, .dbf\"\n                                on:change=\"btnUpload(btn, event)\"\n                                class=\"file-upload\"\n                                type=\"file\"\n                            />\n                            {/if}\n                            <i class=\"{btn.icon}\"></i>\n                            <span>{btn.title}</span>\n                        </label>\n                    </li>\n                    {/each}\n                </ul>\n\n                {#if error}\n                <div class=\"alert alert-error\">\n                    <div class=\"action close\" on:click=\"set({error:false})\">âœ•</div>\n                    {@html error}\n                </div>\n                {/if}\n\n                <h4>{active.longTitle || active.title}</h4>\n\n                <svelte:component\n                    this=\"{Sidebar}\"\n                    bind:chartData\n                    bind:readonly\n                    bind:sheets\n                    bind:datasets\n                />\n            </div>\n        </div>\n        <div class=\"span7\">\n            <svelte:component this=\"{MainPanel}\" bind:chartData bind:readonly />\n\n            <div class=\"buttons pull-right\">\n                <a href=\"describe\" class=\"submit btn btn-primary\" id=\"describe-proceed\">\n                    {__(\"Proceed\")} <i class=\"icon-chevron-right icon-white\"></i\n                ></a>\n            </div>\n        </div>\n    </div>\n</div>\n\n<script>\n    /* global dw */\n    import TextAreaUpload from './TextAreaUpload.html';\n    import UploadHelp from './UploadHelp.html';\n    import SelectSheet from './SelectSheet.html';\n    import readFile from './readFile';\n    import readSpreadsheet from './readSpreadsheet';\n    import httpReq from '@datawrapper/shared/httpReq';\n    import { __ } from '@datawrapper/shared/l10n';\n\n    let app;\n\n    const coreUploads = [\n        {\n            id: 'copy',\n            title: __('upload / copy-paste'),\n            longTitle: __('upload / copy-paste / long'),\n            icon: 'fa fa-clipboard',\n            mainPanel: TextAreaUpload,\n            sidebar: UploadHelp,\n            action() {}\n        },\n        {\n            id: 'upload',\n            title: __('upload / upload-csv'),\n            longTitle: __('upload / upload-csv / long'),\n            icon: 'fa-file-excel-o fa',\n            mainPanel: TextAreaUpload,\n            sidebar: UploadHelp,\n            isFileUpload: true,\n            async onFileUpload(event) {\n                const file = event.target.files[0];\n                if (\n                    file.type.substr(0, 5) === 'text/' ||\n                    file.name.substr(file.name.length - 4) === '.csv'\n                ) {\n                    app.set({ Sidebar: UploadHelp });\n                    readFile(file, async (err, result) => {\n                        if (err) return console.error('could not read file', err);\n                        await httpReq.put(`/v3/charts/${dw.backend.currentChart.get('id')}/data`, {\n                            body: result,\n                            headers: {\n                                'Content-Type': 'text/csv'\n                            }\n                        });\n                        window.location.href = 'describe';\n                    });\n                } else if (file.type.substr(0, 12) === 'application/') {\n                    app.set({ Sidebar: SelectSheet, sheets: [] }); // reset\n                    readSpreadsheet(file, (err, sheets) => {\n                        if (err) return app.set({ error: err });\n                        app.set({ sheets });\n                    });\n                } else {\n                    console.error(file.type);\n                    console.error(file);\n                    app.set({ error: __('upload / csv-required') });\n                }\n            },\n            action() {}\n        }\n    ];\n\n    export default {\n        data() {\n            return {\n                dragover: false,\n                MainPanel: TextAreaUpload,\n                Sidebar: UploadHelp,\n                active: coreUploads[0],\n                buttons: coreUploads,\n                sheets: [],\n                chart: {\n                    id: ''\n                },\n                readonly: false,\n                chartData: '',\n                transpose: false,\n                firstRowIsHeader: true,\n                skipRows: 0\n            };\n        },\n        helpers: { __ },\n        methods: {\n            addButton(btn) {\n                coreUploads.push(btn);\n                this.set({ buttons: coreUploads });\n                const { defaultMethod } = this.get();\n                if (btn.id === defaultMethod) {\n                    this.btnAction(btn);\n                }\n            },\n            btnAction(btn) {\n                this.set({ active: btn });\n                if (btn.id === 'copy') {\n                    // turn off externalData, if still set\n                    const { dw_chart } = this.store.get();\n                    if (dw_chart.get('externalData')) {\n                        dw_chart.set('externalData', '');\n                        setTimeout(() => {\n                            dw.backend.currentChart.save();\n                        }, 1000);\n                    }\n                }\n                let activeKey = btn.id;\n                if (btn.id === 'upload') {\n                    activeKey = 'copy';\n                    setTimeout(() => {\n                        // reset after 1sec\n                        // this.set({active:coreUploads[0]});\n                    }, 1000);\n                }\n                const { dw_chart } = this.store.get();\n                dw_chart.set('metadata.data.upload-method', activeKey);\n                if (btn.action) btn.action();\n                if (btn.mainPanel) this.set({ MainPanel: btn.mainPanel });\n                if (btn.sidebar) this.set({ Sidebar: btn.sidebar });\n            },\n            btnUpload(btn, event) {\n                if (btn.onFileUpload) btn.onFileUpload(event);\n            },\n            dragStart(event) {\n                const { active } = this.get();\n                if (active.id === 'copy') {\n                    event.preventDefault();\n                    this.set({ dragover: true });\n                }\n            },\n            resetDrag() {\n                this.set({ dragover: false });\n            },\n            onFileDrop(event) {\n                const { active } = this.get();\n                if (active.id !== 'copy') return;\n                // Prevent default behavior (Prevent file from being opened)\n                this.resetDrag();\n                event.preventDefault();\n                const files = [];\n                if (event.dataTransfer.items) {\n                    // Use DataTransferItemList interface to access the file(s)\n                    for (let i = 0; i < event.dataTransfer.items.length; i++) {\n                        // If dropped items aren't files, reject them\n                        if (event.dataTransfer.items[i].kind === 'file') {\n                            files.push(event.dataTransfer.items[i].getAsFile());\n                        }\n                    }\n                    event.dataTransfer.items.clear();\n                } else {\n                    // Use DataTransfer interface to access the file(s)\n                    for (let i = 0; i < event.dataTransfer.files.length; i++) {\n                        files.push(event.dataTransfer.files[i]);\n                    }\n                    event.dataTransfer.items.clear();\n                }\n                for (let i = 0; i < files.length; i++) {\n                    if (files[i].type.substr(0, 5) === 'text/') {\n                        return readFile(files[i], async (err, result) => {\n                            if (err) return console.error('could not read file', err);\n\n                            await httpReq.put(\n                                `/v3/charts/${dw.backend.currentChart.get('id')}/data`,\n                                {\n                                    body: result,\n                                    headers: {\n                                        'Content-Type': 'text/csv'\n                                    }\n                                }\n                            );\n\n                            window.location.href = 'describe';\n                        });\n                    }\n                }\n            }\n        },\n        oncreate() {\n            app = this;\n            const { dw_chart } = this.store.get();\n            const method = dw_chart.get('metadata.data.upload-method', 'copy');\n            this.set({ defaultMethod: method });\n            coreUploads.forEach(u => {\n                if (u.id === method) {\n                    this.set({ active: u });\n                }\n            });\n        }\n    };\n</script>\n\n<style>:global(.not-happy) {\n  margin-top: 15px;\n  font-size: 12px;\n}\n:global(.not-happy) a {\n  font-weight: bold;\n}\n.import-methods {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n}\n.import-methods .action {\n  color: #1d81a2;\n  text-align: center;\n  min-height: 50px;\n  width: calc(25% - 20px);\n  margin: 0 10px 10px 0;\n  padding: 15px 0 10px;\n  overflow: hidden;\n  position: relative;\n  display: inline-block;\n  vertical-align: top;\n  cursor: pointer;\n}\n.import-methods .action:hover,\n.import-methods .action.active {\n  background: #fff;\n  border-radius: 4px;\n}\n.import-methods .action.active {\n  color: #222;\n  cursor: default;\n}\n.import-methods .action > label {\n  margin-top: -10px;\n  padding-top: 15px;\n  padding-bottom: 15px;\n  margin-bottom: -10px;\n}\n.import-methods .action > label > i {\n  display: block;\n  margin: 0 auto;\n  font-size: 24px !important;\n}\n.import-methods .action > label > i.fa {\n  position: relative;\n  top: -2px;\n}\n.import-methods .action > label > span {\n  font-size: 12px;\n  line-height: 15px;\n  display: block;\n  padding: 4px 10px 0;\n}\n.import-methods .file-upload {\n  opacity: 0;\n  position: absolute;\n  z-index: -1;\n}\n.draginfo {\n  pointer-events: none;\n  height: 0;\n  position: relative;\n  top: 120px;\n  font-size: 45px;\n  width: 100%;\n  text-align: center;\n  z-index: 10;\n  font-weight: 100;\n}\n:global(.sidebar) h4 {\n  font-size: 17px;\n  font-weight: 400;\n}\n</style>\n",
    "<div>\n    {#if !sheets.length}\n    <div class=\"alert alert-info\">{@html __('upload / parsing-xls') }</div>\n    {:elseif sheets.length>1}\n    <p>{ __(\"upload / select sheet\") }</p>\n    <select bind:value=\"selected\" disabled=\"{!sheets.length}\">\n        {#each sheets as sheet}\n        <option value=\"{sheet}\">{sheet.name}</option>\n        {/each}\n    </select>\n    {:else}\n    <p>{@html __('upload / xls / uploading data')}</p>\n    {/if}\n</div>\n\n<style>\n    select {\n        width: 70%;\n    }\n</style>\n\n<script>\n    import { __ } from '@datawrapper/shared/l10n';\n    import httpReq from '@datawrapper/shared/httpReq';\n\n    /* globals dw */\n    export default {\n        data() {\n            return {\n                selected: false,\n                sheets: []\n            };\n        },\n        helpers: { __ },\n        // eslint-disable-next-line\n        async onupdate({ changed, current }) {\n            if (changed.sheets && current.sheets.length > 1) {\n                setTimeout(() => {\n                    this.set({ selected: current.sheets[0] });\n                }, 300);\n            } else if (changed.sheets && current.sheets.length === 1) {\n                await httpReq.put(`/v3/charts/${dw.backend.currentChart.get('id')}/data`, {\n                    body: current.sheets[0].csv,\n                    headers: {\n                        'Content-Type': 'text/csv'\n                    }\n                });\n                window.location.href = 'describe';\n            }\n            if (changed.selected) {\n                this.set({ chartData: current.selected.csv });\n            }\n        }\n    };\n</script>\n",
    "<p>{ __(\"upload / quick help\") }</p>\n\n<div class=\"demo-datasets\">\n    <p>{ __(\"upload / try a dataset\") }</p>\n    <select disabled=\"{readonly}\" id=\"demo-datasets\" bind:value=\"selectedDataset\">\n        <option value=\"--\">{ __(\"upload / sample dataset\") }</option>\n        {#each datasetsArray as group}\n        <optgroup label=\"{group.type}\">\n            {#each group.datasets as dataset}\n            <option value=\"{dataset}\" class=\"demo-dataset\">{dataset.title}</option>\n            {/each}\n        </optgroup>\n        {/each}\n    </select>\n</div>\n\n<style>\n    select {\n        width: 70%;\n    }\n</style>\n\n<script>\n    import { __ } from '@datawrapper/shared/l10n';\n\n    /* globals dw */\n    export default {\n        data() {\n            return {\n                selectedDataset: '--'\n            };\n        },\n        computed: {\n            datasetsArray({ datasets }) {\n                return Object.keys(datasets).map(k => datasets[k]);\n            }\n        },\n        helpers: { __ },\n        // eslint-disable-next-line\n        onupdate({ changed, current }) {\n            if (changed.selectedDataset && current.selectedDataset !== '--') {\n                const sel = current.selectedDataset;\n                this.set({ chartData: sel.data });\n                if (sel.presets) {\n                    Object.keys(sel.presets).forEach(k => {\n                        dw.backend.currentChart.set(k, sel.presets[k]);\n                    });\n                }\n            }\n        }\n    };\n</script>\n",
    "<form class=\"upload-form\">\n    <div class=\"control-group\">\n        <textarea\n            bind:value=\"chartData\"\n            readonly=\"{readonly}\"\n            id=\"upload-data-text\"\n            style=\"resize: none;\"\n            placeholder=\"{placeholder}\"\n        ></textarea>\n    </div>\n</form>\n\n<script>\n    /* globals dw */\n    import httpReq from '@datawrapper/shared/httpReq';\n    import _throttle from 'underscore-es/throttle';\n    import { __ } from '@datawrapper/shared/l10n';\n\n    let app;\n    const chart = dw.backend.currentChart;\n\n    const updateData = _throttle(() => {\n        const { chartData } = app.get();\n        httpReq.put(`/v3/charts/${chart.get('id')}/data`, {\n            body: chartData,\n            headers: {\n                'Content-Type': 'text/csv'\n            }\n        });\n    }, 1000);\n\n    export default {\n        data() {\n            return {\n                placeholder: __('upload / paste here')\n            };\n        },\n        helpers: { __ },\n        oncreate() {\n            app = this;\n        },\n        // eslint-disable-next-line\n        onupdate({ changed, current, previous }) {\n            if (\n                changed.chartData &&\n                current.chartData &&\n                previous &&\n                previous.chartData !== current.chartData\n            ) {\n                updateData();\n            }\n        }\n    };\n</script>\n\n<style>\n    textarea#upload-data-text {\n        height: 260px;\n    }\n</style>\n"
  ],
  "names": [],
  "mappings": "AAkQe,UAAU,AAAE,CAAC,AAC1B,UAAU,CAAE,IAAI,CAChB,SAAS,CAAE,IAAI,AACjB,CAAC,AACO,UAAU,AAAC,CAAC,CAAC,cAAC,CAAC,AACrB,WAAW,CAAE,IAAI,AACnB,CAAC,AACD,eAAe,cAAC,CAAC,AACf,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,CAAC,CACV,UAAU,CAAE,IAAI,AAClB,CAAC,AACD,6BAAe,CAAC,OAAO,cAAC,CAAC,AACvB,KAAK,CAAE,OAAO,CACd,UAAU,CAAE,MAAM,CAClB,UAAU,CAAE,IAAI,CAChB,KAAK,CAAE,KAAK,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CACvB,MAAM,CAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CACrB,OAAO,CAAE,IAAI,CAAC,CAAC,CAAC,IAAI,CACpB,QAAQ,CAAE,MAAM,CAChB,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,YAAY,CACrB,cAAc,CAAE,GAAG,CACnB,MAAM,CAAE,OAAO,AACjB,CAAC,AACD,6BAAe,CAAC,qBAAO,MAAM,CAC7B,6BAAe,CAAC,OAAO,OAAO,cAAC,CAAC,AAC9B,UAAU,CAAE,IAAI,CAChB,aAAa,CAAE,GAAG,AACpB,CAAC,AACD,6BAAe,CAAC,OAAO,OAAO,cAAC,CAAC,AAC9B,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,OAAO,AACjB,CAAC,AACD,6BAAe,CAAC,OAAO,CAAG,KAAK,cAAC,CAAC,AAC/B,UAAU,CAAE,KAAK,CACjB,WAAW,CAAE,IAAI,CACjB,cAAc,CAAE,IAAI,CACpB,aAAa,CAAE,KAAK,AACtB,CAAC,AACD,6BAAe,CAAC,OAAO,CAAG,KAAK,CAAG,CAAC,cAAC,CAAC,AACnC,OAAO,CAAE,KAAK,CACd,MAAM,CAAE,CAAC,CAAC,IAAI,CACd,SAAS,CAAE,IAAI,CAAC,UAAU,AAC5B,CAAC,AACD,6BAAe,CAAC,OAAO,CAAG,KAAK,CAAG,CAAC,GAAG,cAAC,CAAC,AACtC,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,IAAI,AACX,CAAC,AACD,6BAAe,CAAC,OAAO,CAAG,KAAK,CAAG,IAAI,cAAC,CAAC,AACtC,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,IAAI,CACjB,OAAO,CAAE,KAAK,CACd,OAAO,CAAE,GAAG,CAAC,IAAI,CAAC,CAAC,AACrB,CAAC,AACD,6BAAe,CAAC,YAAY,cAAC,CAAC,AAC5B,OAAO,CAAE,CAAC,CACV,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,EAAE,AACb,CAAC,AACD,SAAS,cAAC,CAAC,AACT,cAAc,CAAE,IAAI,CACpB,MAAM,CAAE,CAAC,CACT,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,KAAK,CACV,SAAS,CAAE,IAAI,CACf,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,EAAE,CACX,WAAW,CAAE,GAAG,AAClB,CAAC,AACO,QAAQ,AAAC,CAAC,EAAE,cAAC,CAAC,AACpB,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,GAAG,AAClB,CAAC;AC5TG,MAAM,eAAC,CAAC,AACJ,KAAK,CAAE,GAAG,AACd,CAAC;ACDD,MAAM,eAAC,CAAC,AACJ,KAAK,CAAE,GAAG,AACd,CAAC;ACqCD,QAAQ,iBAAiB,cAAC,CAAC,AACvB,MAAM,CAAE,KAAK,AACjB,CAAC"
}