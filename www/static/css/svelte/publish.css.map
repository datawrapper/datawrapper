{
  "version": 3,
  "file": "publish.css",
  "sources": [
    "../../../../src/publish/Publish.html",
    "../../../../src/node_modules/@datawrapper/controls/Help.html"
  ],
  "sourcesContent": [
    "<!-- new publish step -->\n<div>\n    {#if publishHed}\n    <h2 class=\"pad-top\">{@html publishHed}</h2>\n    {/if} {#if publishIntro}\n    <p>{@html publishIntro}</p>\n    {:else} {#if published}\n    <p>{@html __('publish / republish-intro') }</p>\n    {:else}\n    <p style=\"margin-bottom: 20px;\">{@html __('publish / publish-intro') }</p>\n    {/if} {/if}\n\n    <button\n        disabled=\"{ publishing }\"\n        on:click=\"publish()\"\n        class=\"btn-publish btn btn-primary btn-large {published?'':'btn-first-publish'}\"\n    >\n        {#if published}\n        <span class=\"re-publish\"\n            ><i class=\"fa fa-fw fa-refresh {publishing ? 'fa-spin' : ''}\"></i>\n            <span class=\"title\">{ __('publish / republish-btn') }</span></span\n        >\n        {:else}\n        <span class=\"publish\"\n            ><i class=\"fa fa-fw {publishing ? 'fa-refresh fa-spin' : 'fa-cloud-upload'}\"></i>\n            <span class=\"title\">{ __('publish / publish-btn') }</span></span\n        >\n        {/if}\n    </button>\n\n    {#if !published}\n    <div class=\"publish-intro\">\n        <div class=\"arrow\">\n            <i class=\"fa fa-chevron-left\"></i>\n        </div>\n        <div class=\"text\">\n            {@html __('publish / publish-btn-intro') }\n        </div>\n    </div>\n    {/if} {#if needs_republish && !publishing}\n    <div class=\"btn-aside alert\">\n        {@html __('publish / republish-alert') }\n    </div>\n    {/if} {#if published && !needs_republish && progress && progress.includes('done') &&\n    !publishing}\n    <div class=\"alert alert-success\">\n        {@html __('publish / publish-success') }\n    </div>\n    {/if} {#if publish_error}\n    <div class=\"alert alert-error\">\n        {@html publish_error }\n    </div>\n    {/if} {#if publishing}\n    <div class=\"alert alert-info publishing\">\n        { __(\"publish / progress / please-wait\") } {#if publishWait > 3000}\n        <!-- show progress information after 3s -->\n        <ul class=\"publish-progress unstyled\">\n            {#each progress as step,i}\n            <li class:done=\"i < progress.length-1\">\n                <i\n                    class=\"fa fa-fw {i < progress.length-1 ? 'fa-check' : 'fa-spinner fa-pulse'}\"\n                ></i>\n                {@html __('publish / status / '+step)}\n            </li>\n            {/each}\n        </ul>\n        {/if}\n    </div>\n    {/if}\n\n    <div style=\"margin-top: 30px;\" class=\"{published?'':'inactive'}\">\n        <h2>{@html __('publish / share-embed') }</h2>\n        <div class=\"block\">\n            <i class=\"icon fa fa-link fa-fw\"></i>\n            <div class=\"ctrls\">\n                <div class=\"h\">\n                    <b>{@html __('publish / share-url') }</b>\n                    <div class=\"embed-options\">\n                        <label class=\"radio\">\n                            <input\n                                bind:group=\"shareurl_type\"\n                                value=\"default\"\n                                type=\"radio\"\n                                name=\"url-type\"\n                            />\n                            {@html __('publish / share-url / fullscreen') }\n                        </label>\n                        {#each plugin_shareurls as tpl}\n                        <label class=\"radio\"\n                            ><input\n                                bind:group=\"shareurl_type\"\n                                value=\"{tpl.id}\"\n                                type=\"radio\"\n                                name=\"url-type\"\n                            />\n                            {@html tpl.name}</label\n                        >\n                        {/each}\n                    </div>\n                </div>\n                <div class=\"inpt\">\n                    <a target=\"_blank\" class=\"share-url\" href=\"{shareUrl}\">{shareUrl}</a>\n                </div>\n            </div>\n            <Help>\n                <div>{@html __('publish / help / share-url') }</div>\n            </Help>\n        </div>\n\n        <div class=\"block\">\n            <i class=\"icon fa fa-code fa-fw\"></i>\n            <div class=\"ctrls\">\n                <div class=\"h\">\n                    <b>{@html __('publish / embed') }</b>\n                    <div class=\"embed-options\">\n                        {#each embed_templates as tpl}\n                        <label class=\"radio\"\n                            ><input type=\"radio\" bind:group=\"embed_type\" value=\"{tpl.id}\" /> {@html\n                            tpl.title }</label\n                        >\n                        {/each}\n                    </div>\n                </div>\n                <div class=\"inpt\">\n                    <textarea\n                        ref:embedInput\n                        type=\"text\"\n                        class=\"input embed-code\"\n                        readonly\n                        value=\"{embedCode}\"\n                    ></textarea>\n                    <button class=\"btn btn-copy\" on:click=\"copy(embedCode)\" title=\"copy\">\n                        <i class=\"fa fa-copy\"></i> { __('publish / copy') }\n                    </button>\n                    <div class=\"copy-success {copy_success ? 'show':''}\">\n                        { __('publish / copy-success') }\n                    </div>\n                </div>\n            </div>\n            <Help>\n                <div>\n                    {@html __('publish / embed / help') } {#each embed_templates.slice(2) as tpl}\n                    <div><b>{tpl.title}:</b> {@html tpl.text}</div>\n                    {/each}\n                </div>\n            </Help>\n        </div>\n    </div>\n\n    <!-- BEFORE EXPORT -->\n    <svelte:component this=\"{beforeExport}\" />\n\n    <!-- EXPORT -->\n    <div class=\"export-and-duplicate\">\n        <div>\n            <h2 class=\"pad-top\">{@html exportHed}</h2>\n            {#if exportIntro}\n            <p>{@html exportIntro}</p>\n            {/if}\n        </div>\n\n        <ul class=\"chart-actions\">\n            {#each sortedChartActions as action} {#if action}\n            <li\n                class=\"action action-{action.id} {action.class||''} {action.id == active_action ? 'active':''}\"\n            >\n                <a\n                    on:click=\"select(action, event)\"\n                    role=\"button\"\n                    href=\"{action.url ? action.url : '#'+action.id}\"\n                >\n                    <i class=\"fa fa-{action.icon}\"></i\n                    ><span class=\"title\">{@html action.title}</span>\n                </a>\n                {#if action.banner && action.banner.text != \"FALSE\" && action.banner.text != \"-\"}\n                <div class=\"banner\" style=\"{action.banner.style}\">{action.banner.text}</div>\n                {/if}\n            </li>\n            {/if} {/each}\n        </ul>\n\n        <svelte:component ref:action this=\"{Action}\" visible=\"{true}\" show=\"{false}\" />\n    </div>\n</div>\n\n<style>\n    .btn-publish {\n        border-color: #1d81a2 !important;\n        box-shadow: 0px 3px 6px rgba(0, 0, 0, 0.25);\n        line-height: 20px;\n        padding: 15px;\n    }\n\n    .btn-publish + .alert {\n        margin-top: 10px;\n    }\n\n    .btn-first-publish {\n        text-align: center;\n        width: 150px;\n        vertical-align: middle;\n        padding: 15px 0 15px;\n    }\n\n    .btn-publish i.fa {\n        font-size: 20px;\n    }\n    .btn-first-publish i.fa {\n        font-size: 32px;\n        display: block;\n        margin: 5px auto;\n    }\n\n    .btn-first-publish .title {\n        display: block;\n        text-align: center;\n        font-size: 18px;\n        line-height: 22px;\n        padding: 5px 20px 0px 20px;\n    }\n    .publish-intro {\n        display: inline-block;\n        font-size: 18px !important;\n        line-height: 22px;\n    }\n\n    .publish-intro .arrow {\n        vertical-align: middle;\n        display: inline-block;\n        padding: 15px;\n    }\n    .publish-intro .text {\n        vertical-align: middle;\n        display: inline-block;\n        width: 200px;\n    }\n    @media (max-width: 1200px) {\n        .publish-intro {\n            font-size: 15px;\n        }\n        .publish-intro .text {\n            vertical-align: middle;\n            display: inline-block;\n            width: 140px;\n            line-height: 18px;\n            font-size: 15px;\n        }\n    }\n\n    div.progress {\n        margin-top: 8px;\n        margin-bottom: 4px;\n    }\n    input[type='radio'] {\n        vertical-align: baseline !important;\n        margin-left: -20px !important;\n    }\n    a.share-url {\n        font-size: 18px;\n    }\n    .btn-aside.alert {\n        margin-left: 0;\n        margin-top: 7px;\n        max-width: 100%;\n    }\n\n    .copy-success {\n        font-size: 11px;\n        color: #9c9;\n        font-style: italic;\n        opacity: 0;\n        pointer-events: none;\n        transition: opacity 5s ease-in;\n        margin-top: -10px;\n        position: absolute;\n    }\n    .copy-success.show {\n        opacity: 1;\n        transition: none;\n    }\n    .embed-options {\n        display: inline-block;\n    }\n    .embed-code {\n        height: 20px;\n    }\n    .publish-progress {\n        margin-top: 5px;\n    }\n    .publish-progress li.done {\n        opacity: 0.6;\n    }\n</style>\n\n<script>\n    /* eslint camelcase: \"off\" */\n    import Help from '@datawrapper/controls/Help.html';\n\n    import { __ } from '@datawrapper/shared/l10n';\n    import { trackEvent } from '@datawrapper/shared/analytics';\n    import request from '@datawrapper/shared/httpReq';\n    import { loadScript, loadStylesheet } from '@datawrapper/shared/fetch';\n    import get from '@datawrapper/shared/get';\n\n    import Action from './Action.html';\n\n    let initial_auto_publish = true;\n\n    export default {\n        components: { Help },\n        data() {\n            return {\n                active_action: '',\n                embed_templates: [],\n                plugin_shareurls: [],\n                published: false,\n                publishing: false,\n                publishStarted: 0,\n                needs_republish: false,\n                publish_error: false,\n                auto_publish: false,\n                progress: [],\n                shareurl_type: 'default',\n                embed_type: 'responsive',\n                copy_success: false,\n                Action,\n                chartActions: [\n                    {\n                        id: 'duplicate',\n                        icon: 'code-fork',\n                        title: __('Duplicate'),\n                        order: 500,\n                        action: 'duplicate'\n                    }\n                ],\n                publishHed: '',\n                publishIntro: '',\n                beforeExport: null,\n                exportHed: __('publish / export-duplicate'),\n                exportIntro: __('publish / export-duplicate / intro'),\n                embedCode: '',\n                statusUrl: false\n            };\n        },\n        computed: {\n            shareUrl({ shareurl_type, $id, $publicUrl, $metadata, plugin_shareurls, published }) {\n                if (!published) return 'https://www.datawrapper.de/...';\n                if (shareurl_type === 'default') return $publicUrl;\n                let url = '';\n\n                plugin_shareurls.forEach(t => {\n                    if (t.id === shareurl_type) {\n                        url = t.url.replace(/%chart_id%/g, $id);\n\n                        url = url.replace(/%(.*?)%/g, (match, path) => {\n                            return get(\n                                {\n                                    id: $id,\n                                    metadata: $metadata\n                                },\n                                path\n                            );\n                        });\n                    }\n                });\n                return url;\n            },\n\n            sortedChartActions({ chartActions, $actions }) {\n                return chartActions\n                    .concat($actions)\n                    .filter(a => a.id !== 'publish-s3')\n                    .sort((a, b) => a.order - b.order);\n            },\n\n            publishWait({ publishStarted, now }) {\n                return publishStarted > 0 ? now - publishStarted : 0;\n            }\n        },\n        helpers: { __ },\n        methods: {\n            publish() {\n                this.set({\n                    publishing: true,\n                    publishStarted: new Date().getTime(),\n                    now: new Date().getTime(),\n                    progress: [],\n                    publish_error: false\n                });\n\n                const chart = this.store;\n\n                trackEvent('Chart Editor', 'publish');\n\n                const chartId = chart.get().id;\n\n                chart.store(() => {\n                    this.set({\n                        statusUrl: `/v3/charts/${chartId}/publish/status/${\n                            chart.get().publicVersion\n                        }`\n                    });\n                    // publish chart\n                    request\n                        .post(`/v3/charts/${chartId}/publish`)\n                        .then(res => {\n                            this.set({\n                                published: true,\n                                progress: ['done']\n                            });\n                            request.get(`/v3/charts/${chartId}`).then(res => {\n                                trackEvent('Chart Editor', 'publish-success');\n                                this.publishFinished(res);\n                            });\n                        })\n                        .catch(error => {\n                            this.set({\n                                publish_error: error.message\n                            });\n                            trackEvent('Chart Editor', 'publish-error', error.message);\n                        });\n\n                    setTimeout(() => {\n                        const { publishing } = this.get();\n                        if (publishing) this.updateStatus();\n                    }, 1000);\n                });\n            },\n\n            updateStatus() {\n                const { statusUrl } = this.get();\n                if (!statusUrl) return;\n                request.get(statusUrl).then(res => {\n                    this.set({\n                        progress: res.progress || [],\n                        now: new Date().getTime()\n                    });\n                    const { publishing } = this.get();\n                    if (publishing) {\n                        setTimeout(() => {\n                            this.updateStatus();\n                        }, 500);\n                    }\n                });\n            },\n\n            publishFinished(chartInfo) {\n                this.set({\n                    progress: ['done'],\n                    published: true,\n                    publishStarted: 0,\n                    needs_republish: false\n                });\n                this.store.set({\n                    lastEditStep: 5\n                });\n\n                window.parent.postMessage(\n                    {\n                        source: 'datawrapper',\n                        type: 'chart-publish',\n                        chartId: chartInfo.id\n                    },\n                    '*'\n                );\n\n                // give user 1s to read the success message\n                setTimeout(() => this.set({ publishing: false }), 1000);\n                this.store.set(chartInfo);\n            },\n\n            setEmbedCode() {\n                const chart = this.store;\n                const state = this.get();\n                if (!state) return;\n                const embedType = state.embed_type ? `embed-method-${state.embed_type}` : null;\n\n                const { publicUrl } = chart.get();\n                const embedCodes = chart.getMetadata('publish.embed-codes');\n                const embedHeight = chart.getMetadata('publish.embed-height');\n\n                this.set({\n                    embedCode:\n                        embedCodes && embedCodes[embedType]\n                            ? embedCodes[embedType]\n                            : embedType === 'custom'\n                            ? ''\n                            : `<iframe src=\"${publicUrl}\" width=\"100%\" height=\"${embedHeight}\" scrolling=\"no\" frameborder=\"0\" allowtransparency=\"true\"></iframe>`\n                });\n            },\n\n            copy() {\n                const me = this;\n                me.refs.embedInput.select();\n                try {\n                    var successful = document.execCommand('copy');\n                    if (successful) {\n                        trackEvent('Chart Editor', 'embedcode-copy');\n                        me.set({ copy_success: true });\n                        setTimeout(() => me.set({ copy_success: false }), 300);\n                    }\n                } catch (err) {\n                    // console.log('Oops, unable to copy');\n                }\n            },\n\n            select(action, event) {\n                event.preventDefault();\n                // set hash which is used to show the action module\n                window.location.hash = action.id;\n\n                const { active_action } = this.get();\n                if (action.id === active_action) {\n                    // unselect current action\n                    return this.set({ active_action: '', Action });\n                }\n                this.set({ active_action: action.id });\n                if (action.mod) {\n                    if (action.mod.App) {\n                        this.refs.action.set({ show: false });\n                        this.set({ Action: action.mod.App });\n                        this.refs.action.set({ show: true });\n                    } else {\n                        // todo: show loading indicator\n                        this.set({ Action });\n                        this.refs.action.set({ loading: true });\n                        if (action.mod.css) {\n                            loadStylesheet(action.mod.css);\n                        }\n                        loadScript(action.mod.src, () => {\n                            setTimeout(() => {\n                                require([action.mod.id], mod => {\n                                    // todo: HIDE loading indicator\n                                    Object.assign(action.mod, mod);\n                                    this.set({ Action: action.mod.App });\n                                    this.refs.action.set({ show: true });\n                                    if (mod.init) mod.init(this.refs.action);\n                                    if (action.mod.data) this.refs.action.set(action.mod.data);\n                                });\n                            }, 200);\n                        });\n                    }\n                } else if (action.action && this[action.action]) {\n                    this.set({ Action });\n                    this[action.action]();\n                } else if (typeof action.action === 'function') {\n                    this.set({ Action });\n                    action.action();\n                }\n            },\n\n            duplicate() {\n                const { id } = this.store.get();\n                trackEvent('Chart Editor', 'duplicate');\n                request\n                    .post(`/api/charts/${id}/copy`, {\n                        baseUrl: `${window.location.protocol}//${window.location.hostname}`\n                    })\n                    .then(res => {\n                        if (res.status === 'ok') {\n                            // redirect to copied chart\n                            window.location.href = `/edit/${res.data.id}/visualize`;\n                        } else {\n                            console.warn(res);\n                        }\n                    });\n            }\n        },\n\n        oncreate() {\n            const { lastEditStep } = this.store.get();\n            this.set({ published: lastEditStep > 4 });\n            // store reference to publish step\n            window.dw.backend.fire('edit.publish.oncreate', this);\n            // watch changes\n            this.setEmbedCode();\n            const chart = this.store;\n            chart.observeDeep('metadata.publish.embed-codes', () => this.setEmbedCode());\n            chart.observeDeep('metadata.publish.embed-height', () => this.setEmbedCode());\n            chart.observeDeep('publicUrl', () => this.setEmbedCode());\n        },\n\n        onstate({ changed, current }) {\n            const userDataReady = window.dw && window.dw.backend && window.dw.backend.setUserData;\n            if (changed.embed_type && userDataReady) {\n                const data = window.dw.backend.__userData;\n                if (!current.embed_type || !data) return;\n                data.embed_type = current.embed_type;\n                window.dw.backend.setUserData(data);\n            }\n            if (changed.embed_type) {\n                this.setEmbedCode();\n            }\n            if (changed.shareurl_type && userDataReady) {\n                const data = window.dw.backend.__userData;\n                if (!current.shareurl_type || !data) return;\n                data.shareurl_type = current.shareurl_type;\n                window.dw.backend.setUserData(data);\n            }\n            if (changed.published) {\n                const publishStep = window.document.querySelector(\n                    '.dw-create-publish .publish-step'\n                );\n                if (publishStep) {\n                    publishStep.classList[current.published ? 'add' : 'remove']('is-published');\n                }\n            }\n            if (changed.auto_publish) {\n                if (current.auto_publish && initial_auto_publish) {\n                    this.publish();\n                    initial_auto_publish = false;\n                    window.history.replaceState('', '', window.location.pathname);\n                }\n            }\n        }\n    };\n</script>\n",
    "<div on:mouseenter=\"show()\" on:mouseleave=\"hide()\" class=\"help\">\n    <span class=\"help-icon\">?</span>\n    {#if visible}\n    <div class=\"content\">\n        <i class=\"hat-icon im im-graduation-hat\"></i>\n        <slot />\n    </div>\n    {/if}\n</div>\n\n<style type=\"text/css\">\n    .help {\n        float: right;\n        position: relative;\n        top: 4px;\n    }\n    .help-icon {\n        display: block;\n        width: 22px;\n        height: 22px;\n        line-height: 22px;\n        border-radius: 50%;\n        background: transparent;\n        text-align: center;\n        color: #6c6e6f66;\n        font-size: 16px;\n        cursor: default;\n    }\n    .help-icon:hover {\n        background: #18a1cd;\n        color: #f9f9f9;\n    }\n    .hat-icon {\n        font-size: 16px;\n        color: #fff;\n        position: absolute;\n        left: -15px;\n        top: 12px;\n    }\n    .content {\n        position: absolute;\n        z-index: 1000;\n        top: -8px;\n        left: -5px;\n        padding: 8px;\n        text-indent: 25px;\n        background: #18a1cd;\n        color: #fff;\n        width: 240px;\n        border-radius: 2px;\n        box-shadow: 3px 2px 2px rgba(0, 0, 0, 0.1);\n    }\n    .content :global(img) {\n        max-width: none;\n    }\n    .content :global(a) {\n        color: white;\n        text-decoration: underline;\n    }\n</style>\n\n<script>\n    export default {\n        data() {\n            return {\n                visible: false\n            };\n        },\n        methods: {\n            show() {\n                const t = setTimeout(() => {\n                    this.set({ visible: true });\n                }, 400);\n                this.set({ t });\n            },\n            hide() {\n                const { t } = this.get();\n                clearTimeout(t);\n                this.set({ visible: false });\n            }\n        }\n    };\n</script>\n"
  ],
  "names": [],
  "mappings": "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"
}