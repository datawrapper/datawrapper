{
  "version": 3,
  "file": "describe.css",
  "sources": [
    "../../../../src/describe/App.html",
    "../../../../src/describe/ComputedColumnEditor.html",
    "../../../../src/describe/CustomColumnFormat.html",
    "../../../../src/controls/Checkbox.html",
    "../../../../src/controls/Select.html",
    "../../../../src/describe/Histogram.html",
    "../../../../src/controls/hot/Handsontable.html"
  ],
  "sourcesContent": [
    "<div class=\"chart-editor\">\n    <div class=\"row\">\n        <div class=\"span4\">\n            <div class=\"sidebar\">\n                {#if activeColumn} {#if customColumn}\n\n                <ComputedColumnEditor\n                    on:updateTable=\"refs.hot.update()\"\n                    on:renderTable=\"refs.hot.render()\"\n                    on:unselect=\"set({activeColumn:false})\"\n                    bind:column=\"customColumn\"\n                    bind:columns\n                />\n\n                <button on:click=\"force(event, true)\" class=\"btn\">\n                    {__('describe / edit-format')}\n                </button>\n\n                {:elseif columnFormat}\n\n                <CustomColumnFormat on:updateTable=\"refs.hot.update()\" on:renderTable=\"refs.hot.render()\" bind:column=\"columnFormat\" bind:columns />\n\n                {#if columnFormat.isComputed}\n                <button class=\"btn\" on:click=\"force(event, false)\"><i class=\"fa  fa-chevron-left\"></i> {__('describe / edit-formula')}</button>\n                {/if} {/if} {#if activeColumn.type() == 'number'}\n                <Histogram bind:values=\"activeValues\" bind:format=\"activeFormat\" />\n                {/if} {:elseif multiSelection}\n\n                <h3 class=\"first\">{__('describe / show-hide-multi')}</h3>\n\n                <ul class=\"unstyled\">\n                    <li style=\"margin-bottom: 5px\">\n                        <button class=\"btn\" on:click=\"hideMultiple(multiSelection, false)\">\n                            <i class=\"fa fa-eye\"></i> {__('describe / show-selected')}\n                        </button>\n                    </li>\n                    <li>\n                        <button class=\"btn\" on:click=\"hideMultiple(multiSelection, true)\">\n                            <i class=\"fa fa-eye-slash\"></i> {__('describe / hide-selected')}\n                        </button>\n                    </li>\n                </ul>\n\n                {:else}\n\n                <h3 class=\"first\">{ __(`Make sure the data looks right`) }</h3>\n\n                <p>{@html __(`describe / data-looks-right`) }</p>\n\n                <Checkbox label=\"{ __(\"First row as label\") }\" bind:value=\"firstRowIsHeader\" /> {#if showLocale }\n                <h4>{__(`describe / locale-select / hed`)}</h4>\n\n                <p>{@html __(`describe / locale-select / body`)}</p>\n\n                <select bind:value=\"locale\">\n                    {#each locales as locale}\n                    <option value=\"{locale.value}\">{locale.label} ({locale.value})</option>\n                    {/each}\n                </select>\n                {/if} {/if}\n\n                <hr />\n\n                <div class=\"btn-group\">\n                    <a class=\"btn submit\" href=\"upload\"><i class=\"icon-chevron-left\"></i> {__('Back')}</a>\n                    <a href=\"visualize\" class=\"submit btn btn-primary\" id=\"describe-proceed\">\n                        {__('Proceed')} <i class=\"icon-chevron-right icon-white\"></i\n                    ></a>\n                </div>\n            </div>\n        </div>\n        <div class=\"span8\">\n            <div class=\"help\">{@html __('describe / info-table-header')} <img src=\"/static/img/arrow.svg\" /></div>\n            <div class=\"pull-right\" style=\"margin-bottom: 10px\">\n                <div class=\"sort-box\">\n                    <div class=\"btn-group\" ref:sortDropdownGroup>\n                        <button class=\"btn dropdown-toggle\" data-toggle=\"dropdown\">\n                            {@html __('describe / sort-by')}… <span class=\"caret\"></span>\n                        </button>\n                        <ul class=\"dropdown-menu sort-menu\">\n                            <li class=\"{'-'==sortBy?'active':''}\">\n                                <a on:click=\"sort(event, '-')\" href=\"#s\">{@html __('describe / no-sorting')}</a>\n                            </li>\n                            {#each columns as col}\n                            <li class=\"{col.name()==sortBy?'active':''}\">\n                                <a on:click=\"sort(event, col.name(), true)\" href=\"#/{col.name()}\">\n                                    <i\n                                        on:click=\"sort(event, col.name(), true)\"\n                                        class=\"fa fa-sort-{col.type()=='text'?'alpha':'amount'}-asc fa-fw\"\n                                    ></i>\n                                    <i\n                                        on:click=\"sort(event, col.name(), false)\"\n                                        class=\"fa fa-sort-{col.type()=='text'?'alpha':'amount'}-desc fa-fw\"\n                                    ></i\n                                    >&nbsp;&nbsp;&nbsp;{col.title()}</a\n                                >\n                            </li>\n                            {/each}\n                        </ul>\n                    </div>\n                </div>\n\n                <div class=\"search-box form-search\">\n                    <i class=\"im im-magnifier\"></i>\n                    <div class=\"{searchResults.length > 0 ? 'input-append' : ''}\">\n                        <input\n                            autocomplete=\"screw-you-google-chrome\"\n                            type=\"search\"\n                            on:keypress=\"keyPress(event)\"\n                            placeholder=\"{__('Search data table')}\"\n                            bind:value=\"search\"\n                            ref:search\n                            class=\"{searchResults.length > 0?'with-results':''} search-query\"\n                        />\n                        {#if searchResults.length > 0}\n                        <div class=\"btn-group\">\n                            <button class=\"btn\" on:click=\"nextResult(-1)\">\n                                <i class=\"fa fa-chevron-up\"></i>\n                            </button>\n                            <button class=\"btn\" on:click=\"nextResult(+1)\">\n                                <i class=\"fa fa-chevron-down\"></i>\n                            </button>\n                        </div>\n                        {/if}\n                    </div>\n\n                    {#if search}\n                    <div class=\"results\">\n                        {#if searchResults.length > 0} {searchIndexSafe+1} {__(`describe / search / of`) } {searchResults.length} {__(`describe /\n                        search / results`) } {:elseif search} { __(`describe / search / no-matches`) } {/if}\n                    </div>\n                    {/if}\n                </div>\n            </div>\n\n            <Handsontable\n                ref:hot\n                bind:data=\"chartData\"\n                bind:transpose\n                bind:firstRowIsHeader\n                bind:fixedColumnsLeft\n                bind:activeColumn\n                bind:readonly\n                bind:sorting\n                bind:search\n                bind:searchResults\n                bind:searchIndex\n                bind:multiSelection\n                on:resetSort=\"set({sortBy:'-'})\"\n            />\n\n            <div class=\"buttons below-table pull-right\">\n                <button class=\"btn transpose\" on:click=\"toggleTranspose()\">\n                    <img src=\"/static/css/chart-editor/transpose.png\" /> {__(`describe / transpose-long`)}\n                </button>\n\n                <button on:click=\"addComputedColumn()\" class=\"btn computed-columns\">\n                    <i class=\"fa fa-calculator\"></i> {__(`computed columns / add-btn`)}…\n                </button>\n\n                <button on:click=\"revertChanges()\" class=\"btn {has_changes?'':'disabled'}\" id=\"reset-data-changes\">\n                    <i class=\"fa fa-undo\"></i> {__(`Revert changes`)}…\n                </button>\n            </div>\n        </div>\n    </div>\n</div>\n\n<script>\n    /* global chart */\n    import ComputedColumnEditor from './ComputedColumnEditor.html';\n    import CustomColumnFormat from './CustomColumnFormat.html';\n    import Histogram from './Histogram.html';\n    import Handsontable from '../controls/hot/Handsontable.html';\n    import Checkbox from '../controls/Checkbox.html';\n\n    import { __ } from '../shared/l10n';\n    import { arrayToObject } from '../shared/utils.js';\n    import clone from '../shared/clone.js';\n\n    export default {\n        components: { Handsontable, Checkbox, ComputedColumnEditor, CustomColumnFormat, Histogram },\n        data() {\n            return {\n                locale: 'en-US',\n                search: '',\n                chartData: '',\n                readonly: false,\n                transpose: false,\n                firstRowIsHeader: true,\n                fixedColumnsLeft: 0,\n                searchIndex: 0,\n                activeColumn: false,\n                customColumn: false,\n                columnFormat: false,\n                multiSelection: false,\n                forceColumnFormat: false,\n                searchResults: [],\n                sortBy: '-',\n                sortDir: true\n            };\n        },\n        computed: {\n            searchIndexSafe({ searchIndex, searchResults }) {\n                if (searchIndex < 0) searchIndex += searchResults.length;\n                searchIndex = searchIndex % searchResults.length;\n                return searchIndex;\n            },\n            customColumn({ activeColumn, forceColumnFormat }) {\n                return activeColumn && !forceColumnFormat && activeColumn.isComputed ? activeColumn : false;\n            },\n            columnFormat({ activeColumn, forceColumnFormat }) {\n                return activeColumn && (!activeColumn.isComputed || forceColumnFormat) ? activeColumn : false;\n            },\n            activeValues({ activeColumn }) {\n                return activeColumn ? activeColumn.values() : [];\n            },\n            activeFormat({ activeColumn, $dw_chart }) {\n                return activeColumn ? $dw_chart.columnFormatter(activeColumn) : d => d;\n            },\n            columns({ activeColumn }) {\n                const ds = chart.dataset();\n                if (!activeColumn) return ds ? ds.columns() : [];\n                try {\n                    return ds.columns().filter(col => !col.isComputed);\n                } catch (e) {\n                    return [];\n                }\n            },\n            sorting({ sortBy, sortDir }) {\n                return { sortBy, sortDir };\n            }\n        },\n        helpers: { __ },\n        methods: {\n            nextResult(diff) {\n                let { searchIndex, searchResults } = this.get();\n                searchIndex += diff;\n                if (searchIndex < 0) searchIndex += searchResults.length;\n                searchIndex = searchIndex % searchResults.length;\n                this.set({ searchIndex });\n            },\n            keyPress(event) {\n                if (event.key === 'F3' || event.key === 'Enter') {\n                    this.nextResult(event.shiftKey ? -1 : 1);\n                }\n            },\n            toggleTranspose() {\n                this.set({ activeColumn: false });\n                this.set({ transpose: !this.get().transpose });\n                setTimeout(() => this.refs.hot.update(), 500);\n                // ;\n            },\n            revertChanges() {\n                const chart = this.store.get().dw_chart;\n                chart.set('metadata.data.changes', []);\n                chart.saveSoon();\n                this.refs.hot.update();\n            },\n            cmFocus() {\n                setTimeout(() => {\n                    this.refs.hot.get().hot.render();\n                }, 100);\n            },\n            addComputedColumn() {\n                const chart = this.store.get().dw_chart;\n                const ds = chart.dataset();\n                const computed = arrayToObject(chart.get('metadata.describe.computed-columns', {}));\n                // find new id\n                let i = 1;\n                while (ds.hasColumn(`Column ${i}`)) {\n                    i++;\n                }\n                const id = `Column ${i}`;\n                computed[id] = '';\n                chart.set('metadata.describe.computed-columns', computed);\n                chart.saveSoon();\n                const ds2 = chart.dataset(true);\n                this.refs.hot.update();\n                this.set({ activeColumn: ds2.column(id) });\n            },\n            sort(event, col, ascending) {\n                event.preventDefault();\n                event.stopPropagation();\n                this.set({ sortBy: col, sortDir: ascending });\n                // hide the dropdown menu\n                this.refs.sortDropdownGroup.classList.remove('open');\n            },\n            force(event, val = true) {\n                event.preventDefault();\n                this.set({ forceColumnFormat: val });\n            },\n            hideMultiple(columns, hide) {\n                const chart = this.store.get().dw_chart;\n                const colFmt = clone(chart.get('metadata.data.column-format', {}));\n                columns.forEach(col => {\n                    if (colFmt[col.name()]) colFmt[col.name()].ignore = hide;\n                    else {\n                        colFmt[col.name()] = { type: 'auto', ignore: hide };\n                    }\n                });\n                chart.set('metadata.data.column-format', colFmt);\n                chart.saveSoon();\n                setTimeout(() => {\n                    this.refs.hot.get().hot.render();\n                }, 10);\n                this.set({ multiSelection: false });\n            }\n        },\n        oncreate() {\n            window.addEventListener('keypress', event => {\n                if (event.ctrlKey && event.key === 'f') {\n                    event.preventDefault();\n                    if (this.refs.search !== window.document.activeElement) {\n                        this.refs.search.focus();\n                    } else {\n                        this.nextResult(+1);\n                    }\n                }\n            });\n        },\n        // eslint-disable-next-line\n        onupdate({ changed, current }) {\n            if (changed.activeColumn && !current.activeColumn) {\n                this.set({ forceColumnFormat: false });\n            }\n            const sync = {\n                transpose: 'metadata.data.transpose',\n                firstRowIsHeader: 'metadata.data.horizontal-header',\n                locale: 'language'\n            };\n            Object.keys(sync).forEach(svelteKey => {\n                if (changed[svelteKey]) {\n                    const svelteValue = current[svelteKey];\n                    const metadataKey = sync[svelteKey];\n                    this.store.get().dw_chart.set(`${metadataKey}`, svelteValue);\n                    if (svelteKey === 'locale') {\n                        if (!svelteValue) return;\n                        this.store.get().dw_chart.locale(svelteValue, () => {\n                            this.refs.hot.render();\n                        });\n                    }\n                }\n            });\n        }\n    };\n</script>\n\n<style>.help {\n  display: inline-block;\n  font-style: italic;\n  line-height: 0px;\n  color: #aaa;\n}\n.below-table {\n  margin-top: 20px;\n}\n.span8 {\n  padding-top: 1em;\n}\n.btn.transpose img {\n  width: 12px;\n  vertical-align: baseline;\n}\n.sort-box {\n  display: inline-block;\n  vertical-align: top;\n  margin-right: 1ex;\n}\n.sort-box .sort-menu li a .fa {\n  opacity: 0.5;\n}\n.sort-box .sort-menu li a .fa:hover {\n  opacity: 1;\n}\n.sort-box .dropdown-menu > li > a {\n  padding: 3px 20px 3px 10px;\n}\n.search-box {\n  display: inline-block;\n  vertical-align: top;\n  position: relative;\n}\n.search-box .results {\n  color: gray;\n  display: inline-block;\n  vertical-align: text-bottom;\n  margin-left: 1ex;\n  margin-right: 1ex;\n}\n.search-box input {\n  padding-left: 26px;\n  width: 24ex;\n  border-radius: 15px;\n}\n.search-box input.with-results {\n  width: 18ex;\n  border-bottom-right-radius: 0px;\n  border-top-right-radius: 0px;\n}\n.search-box .im-magnifier {\n  position: absolute;\n  left: 8px;\n  top: 9px;\n  color: #bbb;\n  font-size: 16px;\n  z-index: 4;\n}\n.search-box .btn-group .btn {\n  padding-left: 6px;\n  padding-right: 6px;\n}\n.search-box .btn-group .btn:first-child {\n  border-radius: 0;\n}\n.search-box .btn-group .btn:last-child {\n  border-bottom-right-radius: 15px;\n  border-top-right-radius: 15px;\n  padding-right: 9px;\n}\n:global(html .form-horizontal .control-group) {\n  margin-bottom: 10px;\n}\n:global(.vis-option-type-checkbox) label {\n  display: inline-block;\n  width: auto !important;\n}\n:global(.sidebar span.type-hl) {\n  background-color: white;\n  padding: 0 3px;\n  font-family: 'Roboto Mono';\n  border: 1px solid #cccccc;\n}\n</style>\n",
    "<div style=\"margin-bottom: 15px\">\n    <h3 class=\"first\">{title}</h3>\n    <p>{__('computed columns / modal / intro')}</p>\n\n    <label>{__('computed columns / modal / name')}</label>\n    <input type=\"text\" bind:value=\"name\" />\n\n    <label>{__('computed columns / modal / formula')}</label>\n    <textarea ref:code class=\"code\"></textarea>\n\n    <p style=\"margin-top: 1em\">{__('computed columns / modal / available columns')}:</p>\n\n    <ul class=\"col-select\">\n        {#each metaColumns as col}\n        <li on:click=\"insert(col)\">{col.key}</li>\n        {/each}\n    </ul>\n</div>\n\n<button on:click=\"removeColumn()\" class=\"btn btn-danger\"><i class=\"fa fa-trash\"></i> {__('computed columns / modal / remove')}</button>\n\n<style>label {\n  font-weight: bold;\n}\n.col-select {\n  padding: 0;\n  margin: 0;\n}\n.col-select li {\n  font-family: 'Roboto mono';\n  display: inline-block;\n  /*color: #1d81a2;*/\n  cursor: pointer;\n  margin: 0px 1ex 1ex 0;\n  font-size: 12px;\n  line-height: 15px;\n  background: #1d81a2;\n  color: white;\n  padding: 2px 5px;\n  border-radius: 2px;\n}\n.col-select li:hover {\n  background: #18a1cd;\n}\n:global(.CodeMirror) {\n  border-radius: 1px;\n  width: 95%;\n  height: 130px;\n  padding: 0px 3px;\n  border: 1px solid #cccccc;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n  transition: border linear 0.2s, box-shadow linear 0.2s;\n  background-color: #ffffff;\n}\n:global(.CodeMirror) .CodeMirror-nonmatchingbracket {\n  color: inherit;\n  background: #fcc;\n}\n:global(.CodeMirror) .CodeMirror-matchingbracket {\n  color: inherit;\n  background: #cfc;\n}\n:global(.CodeMirror) .CodeMirror-placeholder,\n:global(.CodeMirror) .cm-s-default .cm-comment {\n  color: #9c938b;\n}\n:global(.CodeMirror) .cm-variable-2 {\n  color: #18a1cd !important;\n}\n:global(.CodeMirror).CodeMirror-focused {\n  border-color: rgba(82, 168, 236, 0.8);\n  outline: 0;\n  outline: thin dotted \\9;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(82, 168, 236, 0.6);\n  -moz-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(82, 168, 236, 0.6);\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(82, 168, 236, 0.6);\n}\n</style>\n\n<script>\n    import CodeMirror from 'cm/lib/codemirror';\n    import 'cm/mode/javascript/javascript';\n    import 'cm/addon/mode/simple';\n    import 'cm/addon/hint/show-hint';\n    import 'cm/addon/edit/matchbrackets';\n    import 'cm/addon/display/placeholder';\n\n    import _debounce from 'underscore-es/debounce';\n    import clone from '../shared/clone.js';\n    import { __ } from '../shared/l10n';\n    import columnNameToVariable from '../shared/columnNameToVariable';\n\n    export default {\n        data() {\n            return {\n                name: '',\n                formula: ''\n            };\n        },\n        computed: {\n            title({ column }) {\n                var s = __('describe / edit-column');\n                return s.replace('%s', `\"${column ? column.title() || column.name() : '--'}\"`);\n            },\n            metaColumns({ columns }) {\n                if (!columns) return [];\n                return columns.map(col => {\n                    return {\n                        key: columnNameToVariable(col.name()),\n                        title: col.title(),\n                        type: col.type()\n                    };\n                });\n            },\n            keywords({ metaColumns }) {\n                const keywords = ['sum', 'round', 'min', 'max', 'median', 'mean'];\n                metaColumns.forEach(function(col) {\n                    keywords.push(col.key);\n                    if (col.type === 'number') {\n                        keywords.push(col.key + '__sum');\n                        keywords.push(col.key + '__min');\n                        keywords.push(col.key + '__max');\n                        keywords.push(col.key + '__mean');\n                        keywords.push(col.key + '__median');\n                    }\n                });\n                return keywords;\n            }\n        },\n        helpers: { __ },\n        methods: {\n            insert(column) {\n                const { cm } = this.get();\n                cm.replaceSelection(column.key);\n                cm.focus();\n            },\n            removeColumn() {\n                const { column } = this.get();\n                const chart = this.store.get('dw_chart');\n                const ds = chart.dataset();\n                const customCols = clone(chart.get('metadata.describe.computed-columns', {}));\n                delete customCols[column.name()];\n                const colIndex = ds.columnOrder()[ds.indexOf(column.name())];\n                // delete all changes that have been made to this column\n                const changes = chart.get('metadata.data.changes', []);\n                const newChanges = [];\n                changes.forEach(c => {\n                    if (c.column === colIndex) return; // skip\n                    if (c.column > colIndex) c.column--;\n                    newChanges.push(c);\n                });\n                chart.set('metadata.describe.computed-columns', customCols);\n                chart.set('metadata.data.changes', newChanges);\n                chart.saveSoon();\n                this.fire('updateTable');\n                this.fire('unselect');\n            }\n        },\n\n        oncreate() {\n            const { column } = this.get();\n\n            const chart = this.store.get('dw_chart');\n            const customCols = chart.get('metadata.describe.computed-columns', {});\n\n            this.set({\n                formula: customCols[column.name()] || '',\n                name: column.title()\n            });\n\n            // update if column changes\n            this.observe('column', col => {\n                if (col)\n                    this.set({\n                        formula: customCols[col.name()] || '',\n                        name: col.title()\n                    });\n            });\n\n            const app = this;\n\n            function scriptHint(editor) {\n                // Find the token at the cursor\n                const cur = editor.getCursor();\n                const token = editor.getTokenAt(cur);\n                let match = [];\n\n                const keywords = app.get('keywords');\n\n                if (token.type === 'variable') {\n                    match = keywords.filter(function(chk) {\n                        return chk.toLowerCase().indexOf(token.string.toLowerCase()) === 0;\n                    });\n                }\n\n                return {\n                    list: match,\n                    from: CodeMirror.Pos(cur.line, token.start),\n                    to: CodeMirror.Pos(cur.line, token.end)\n                };\n            }\n\n            // CodeMirror.registerHelper(\"hint\", \"javascript\", function(editor, options) {\n            //     return scriptHint(editor, options);\n            // });\n\n            const cm = CodeMirror.fromTextArea(this.refs.code, {\n                value: this.get('formula') || '',\n                mode: 'simple',\n                indentUnit: 2,\n                tabSize: 2,\n                lineWrapping: true,\n                matchBrackets: true,\n                placeholder: '// enter formula here',\n                continueComments: 'Enter',\n                extraKeys: {\n                    Tab: 'autocomplete'\n                },\n                hintOptions: {\n                    hint: scriptHint\n                }\n            });\n\n            window.CodeMirror = CodeMirror;\n\n            this.set({ cm });\n\n            const updateTable = _debounce(() => this.fire('updateTable'), 1500);\n\n            this.observe('formula', formula => {\n                // update codemirror\n                if (formula !== cm.getValue()) {\n                    cm.setValue(formula);\n                }\n                // update dw.chart\n                const { column } = this.get();\n                const customCols = clone(chart.get('metadata.describe.computed-columns', {}));\n                if (customCols[column.name()] !== formula) {\n                    customCols[column.name()] = formula;\n                    chart.set('metadata.describe.computed-columns', customCols);\n                    if (chart.saveSoon) chart.saveSoon();\n                    updateTable();\n                }\n            });\n\n            this.observe('name', name => {\n                const { column } = this.get();\n                const changes = clone(chart.get('metadata.data.changes', []));\n                const ds = chart.dataset();\n                const col = ds.columnOrder()[ds.indexOf(column.name())];\n                let lastColNameChangeIndex = -1;\n                changes.forEach((change, i) => {\n                    if (change.column === col && change.row === 0) {\n                        lastColNameChangeIndex = i;\n                    }\n                });\n                if (lastColNameChangeIndex > -1) {\n                    // update last change of that cell\n                    changes[lastColNameChangeIndex].value = name;\n                    changes[lastColNameChangeIndex].time = new Date().getTime();\n                } else {\n                    // add new change\n                    changes.push({\n                        column: col,\n                        row: 0,\n                        value: name,\n                        time: new Date().getTime()\n                    });\n                }\n                chart.set('metadata.data.changes', changes);\n                if (chart.saveSoon) chart.saveSoon();\n                updateTable();\n            });\n\n            cm.on('change', cm => {\n                this.set({ formula: cm.getValue() });\n            });\n\n            this.observe('metaColumns', cols => {\n                var columnsRegex = new RegExp(`(?:${this.get('keywords').join('|')})`);\n                CodeMirror.defineSimpleMode('simplemode', {\n                    // The start state contains the rules that are intially used\n                    start: [\n                        // The regex matches the token, the token property contains the type\n                        { regex: /\"(?:[^\\\\]|\\\\.)*?(?:\"|$)/, token: 'string' },\n                        // You can match multiple tokens at once. Note that the captured\n                        // groups must span the whole string in this case\n                        {\n                            regex: /(function)(\\s+)([a-z$][\\w$]*)/,\n                            token: ['keyword', null, 'keyword']\n                        },\n                        // Rules are matched in the order in which they appear, so there is\n                        // no ambiguity between this one and the one above\n                        {\n                            regex: /(?:function|var|return|if|for|while|else|do|this)\\b/,\n                            token: 'keyword'\n                        },\n                        { regex: /true|false|null|undefined/, token: 'atom' },\n                        {\n                            regex: /0x[a-f\\d]+|[-+]?(?:\\.\\d+|\\d+\\.?\\d*)(?:e[-+]?\\d+)?/i,\n                            token: 'number'\n                        },\n                        { regex: /\\/\\/.*/, token: 'comment' },\n                        { regex: /\\/(?:[^\\\\]|\\\\.)*?\\//, token: 'variable-3' },\n                        // A next property will cause the mode to move to a different state\n                        { regex: /\\/\\*/, token: 'comment', next: 'comment' },\n                        { regex: /[-+/*=<>!]+/, token: 'operator' },\n                        // indent and dedent properties guide autoindentation\n                        { regex: /[{[(]/, indent: true },\n                        { regex: /[}\\])]/, dedent: true },\n                        { regex: columnsRegex, token: 'variable-2' },\n                        { regex: /[a-z$][\\w$]*/, token: 'variable' },\n                        // You can embed other modes with the mode property. This rule\n                        // causes all code between << and >> to be highlighted with the XML\n                        // mode.\n                        { regex: /<</, token: 'meta', mode: { spec: 'xml', end: />>/ } }\n                    ],\n                    // The multi-line comment state.\n                    comment: [{ regex: /.*?\\*\\//, token: 'comment', next: 'start' }, { regex: /.*/, token: 'comment' }],\n                    // The meta property contains global information about the mode. It\n                    // can contain properties like lineComment, which are supported by\n                    // all modes, and also directives like dontIndentStates, which are\n                    // specific to simple modes.\n                    meta: {\n                        dontIndentStates: ['comment'],\n                        lineComment: '//'\n                    }\n                });\n\n                cm.setOption('mode', 'simplemode');\n            });\n        }\n    };\n</script>\n",
    "<div>\n    <h3 class=\"first\">{title}</h3>\n\n    <div class=\"form-horizontal\">\n        <!-- prettier-ignore -->\n        <Select label=\"{__('Column type')}\" options=\"{colTypes}\" bind:value=\"columnFormat.type\" width=\"180px\" />\n\n        <Checkbox label=\"{ __('Hide column from visualization') }\" bind:value=\"columnFormat.ignore\" />\n\n        <hr />\n\n        {#if column && column.type() == 'number'}\n        <!-- prettier-ignore -->\n        <Select\n            label=\"{__('Round numbers to')}\"\n            options=\"{roundOptions}\"\n            optgroups=\"{numberFormats}\"\n            bind:value=\"columnFormat['number-format']\"\n            width=\"180px\"\n        />\n\n        <!-- prettier-ignore -->\n        <Select\n            label=\"{__('Divide numbers by')}\"\n            options=\"{divisors_opts}\"\n            optgroups=\"{divisors}\"\n            bind:value=\"columnFormat['number-divisor']\"\n            width=\"180px\"\n        />\n\n        <div class=\"control-group vis-option-type-select\">\n            <label class=\"control-label\">\n                {__(\"Prepend/Append\")}\n            </label>\n            <div class=\"controls form-inline\">\n                <input\n                    autocomplete=\"screw-you-google-chrome\"\n                    style=\"width:6ex; text-align:right\"\n                    data-lpignore=\"true\"\n                    name=\"prepend\"\n                    type=\"text\"\n                    bind:value=\"columnFormat['number-prepend']\"\n                />\n                #\n                <input\n                    autocomplete=\"screw-you-google-chrome\"\n                    style=\"width:6ex\"\n                    data-lpignore=\"true\"\n                    name=\"append\"\n                    type=\"text\"\n                    bind:value=\"columnFormat['number-append']\"\n                />\n            </div>\n        </div>\n\n        {/if}\n    </div>\n</div>\n\n<script>\n    /* global dw */\n    import Checkbox from '../controls/Checkbox.html';\n    import Select from '../controls/Select.html';\n    import _throttle from 'underscore-es/throttle';\n    import { arrayToObject } from '../shared/utils.js';\n    import clone from '../shared/clone.js';\n    import { __ } from '../shared/l10n';\n\n    export default {\n        components: { Checkbox, Select },\n        data() {\n            return {\n                columnFormat: {\n                    type: 'auto',\n                    ignore: false,\n                    'number-divisor': 0,\n                    'number-format': 'auto',\n                    'number-prepend': '',\n                    'number-append': ''\n                },\n                colTypes: [],\n                divisors_opts: [\n                    { value: 0, label: __('describe / column-format / no-change') },\n                    { value: 'auto', label: __('describe / column-format / automatic') }\n                ],\n                divisors: [\n                    {\n                        label: __('describe / column-format / divide-by'),\n                        options: [{ value: 3, label: '1000' }, { value: 6, label: '1 million' }, { value: 9, label: '1 billion' }]\n                    },\n                    {\n                        label: __('describe / column-format / multiply-by'),\n                        options: [\n                            { value: -2, label: '100' },\n                            { value: -3, label: '1000' },\n                            { value: -6, label: '1 million' },\n                            { value: -9, label: '1 billion' },\n                            { value: -12, label: '1 trillion' }\n                        ]\n                    }\n                ],\n                numberFormats: [\n                    {\n                        label: __('Decimal places'),\n                        options: [\n                            { value: 'n3', label: '3 (1,234.568)' },\n                            { value: 'n2', label: '2 (1,234.57)' },\n                            { value: 'n1', label: '1 (1,234.6)' },\n                            { value: 'n0', label: '0 (1,235)' }\n                        ]\n                    },\n                    {\n                        label: __('Significant digits'),\n                        options: [\n                            { value: 's6', label: '6 (1,234.57)' },\n                            { value: 's5', label: '5 (123.45)' },\n                            { value: 's4', label: '4 (12.34)' },\n                            { value: 's3', label: '3 (1.23)' },\n                            { value: 's2', label: '2 (0.12)' },\n                            { value: 's1', label: '1 (0.01)' }\n                        ]\n                    }\n                ],\n                roundOptions: [\n                    { value: '-', label: __('describe / column-format / individual') },\n                    { value: 'auto', label: __('describe / column-format / auto-detect') }\n                ]\n            };\n        },\n        computed: {\n            title({ column }) {\n                var s = __('describe / edit-column');\n                return s.replace('%s', `\"${column ? column.title() || column.name() : '--'}\"`);\n            }\n        },\n        helpers: { __ },\n\n        methods: {\n            autoDivisor() {\n                const chart = this.store.get('dw_chart');\n                const { column } = this.get();\n                const mtrSuf = dw.utils.metricSuffix(chart.locale());\n                const values = column.values();\n                const dim = dw.utils.significantDimension(values);\n                let div = dim < -2 ? Math.round((dim * -1) / 3) * 3 : dim > 4 ? dim * -1 : 0;\n                const nvalues = values.map(function(v) {\n                    return v / Math.pow(10, div);\n                });\n                let ndim = dw.utils.significantDimension(nvalues);\n                if (ndim <= 0)\n                    ndim = nvalues.reduce(function(acc, cur) {\n                        return Math.max(acc, Math.min(3, dw.utils.tailLength(cur)));\n                    }, 0);\n\n                if (ndim === div) {\n                    div = 0;\n                    ndim = 0;\n                }\n                if (div > 15) {\n                    div = 0;\n                    ndim = 0;\n                }\n\n                this.set({\n                    columnFormat: {\n                        'number-divisor': div,\n                        'number-format': 'n' + Math.max(0, ndim),\n                        'number-prepend': '',\n                        'number-append': div ? mtrSuf[div] || ' × 10<sup>' + div + '</sup>' : ''\n                    }\n                });\n            },\n            getColumnFormat(column) {\n                const chart = this.store.get('dw_chart');\n                const columnFormats = arrayToObject(chart.get('metadata.data.column-format', {}));\n                let columnFormat = clone(columnFormats[column.name()]);\n                if (!columnFormat || columnFormat === 'auto' || columnFormat.length !== undefined) {\n                    // no valid column format\n                    columnFormat = {\n                        type: 'auto',\n                        ignore: false,\n                        'number-divisor': 0,\n                        'number-prepend': '',\n                        'number-append': '',\n                        'number-format': 'auto'\n                    };\n                }\n                return columnFormat;\n            }\n        },\n\n        oncreate() {\n            const updateTable = _throttle(\n                () => {\n                    this.fire('updateTable');\n                },\n                100,\n                { leading: false }\n            );\n            const renderTable = _throttle(\n                () => {\n                    this.fire('updateTable');\n                },\n                100,\n                { leading: false }\n            );\n\n            const { column } = this.get();\n\n            this.set({\n                colTypes: [\n                    { value: 'auto', label: 'auto (' + column.type() + ')' },\n                    { value: 'text', label: 'Text' },\n                    { value: 'number', label: 'Number' },\n                    { value: 'date', label: 'Date' }\n                ]\n            });\n\n            this.set({ columnFormat: this.getColumnFormat(column) });\n\n            this.observe('column', col => {\n                this.set({ columnFormat: this.getColumnFormat(col) });\n                const { colTypes } = this.get();\n                colTypes[0].label = 'auto (' + column.type() + ')';\n            });\n\n            this.observe('columnFormat', colFormat => {\n                const chrt = this.store.get('dw_chart');\n                const { column } = this.get();\n                const columnFormats = arrayToObject(clone(chrt.get('metadata.data.column-format', {})));\n                const oldFormat = columnFormats[column.name()];\n                if (!oldFormat || JSON.stringify(oldFormat) !== JSON.stringify(colFormat)) {\n                    if (colFormat['number-divisor'] === 'auto') {\n                        // stop here and compute divisor automatically\n                        setTimeout(() => this.autoDivisor(), 100);\n                        return;\n                    }\n                    columnFormats[column.name()] = clone(colFormat);\n                    chrt.set('metadata.data.column-format', columnFormats);\n                    if (chrt.saveSoon) chrt.saveSoon();\n                    if (!oldFormat || oldFormat.type !== colFormat.type) updateTable();\n                    else renderTable();\n                }\n            });\n        }\n    };\n</script>\n\n<style>:global(.vis-option-type-select) .control-label {\n  width: 130px;\n}\n:global(.vis-option-type-select) .controls {\n  margin-left: 150px;\n}\n</style>\n",
    "<!-- DEPRECATED, plase use @datawrapper/controls instead -->\n<div class=\"control-group vis-option-group vis-option-type-checkbox\">\n    <label class=\"checkbox {disabled? 'disabled' :''} {faded? 'faded' :''}\">\n        <input type=\"checkbox\" disabled=\"{disabled}\" bind:checked=\"value\" /><span class=\"css-ui\"></span>\n        &nbsp;{ label }\n    </label>\n</div>\n\n<style>label.checkbox {\n  text-align: left;\n  width: 100%;\n  position: relative;\n  left: 0;\n}\nlabel.checkbox input[type='checkbox'] {\n  float: none;\n  opacity: 0 !important;\n  pointer-events: none;\n  position: absolute;\n  display: inline-block;\n  vertical-align: sub;\n}\nlabel.checkbox input[type='checkbox'] + span.css-ui {\n  display: inline-block;\n  width: 0.85em;\n  height: 0.85em;\n  border-radius: 2px;\n  border: 1px solid #bbb;\n  vertical-align: baseline;\n  position: relative;\n  top: 2px;\n  margin-left: -16px;\n}\nlabel.checkbox input[type='checkbox']:checked + span.css-ui {\n  background: #18a1cd;\n  border-color: #18a1cd;\n}\nlabel.checkbox input[type='checkbox']:checked + span.css-ui:after {\n  position: absolute;\n  display: block;\n  color: white;\n  left: 0.15em;\n  top: 0.4em;\n  font-weight: bold;\n  content: '\\e023';\n  font-family: 'iconmonstr-iconic-font';\n  font-size: 0.65em;\n  line-height: 0.8em;\n}\nlabel.checkbox input[type='checkbox']:focus + span.css-ui {\n  border-color: #18a1cd;\n  box-shadow: 0 0 1px 1px rgba(24, 161, 205, 0.55);\n}\nlabel.checkbox input[type='checkbox']:disabled + span.css-ui {\n  background: #ddd;\n  border-color: #bbb;\n  cursor: not-allowed;\n  opacity: 0.6;\n}\nlabel.checkbox input[type='checkbox']:disabled:checked + span.css-ui {\n  border-color: #bbb;\n  background: #bbb;\n}\nlabel.checkbox.disabled,\nlabel.checkbox.faded {\n  color: #999;\n}\nlabel.checkbox.disabled input,\nlabel.checkbox.faded input {\n  opacity: 0.5;\n}\n</style>\n\n<script>\n    export default {\n        data() {\n            return {\n                disabled: false,\n                faded: false\n            };\n        }\n    };\n</script>\n",
    "<!-- DEPRECATED, plase use @datawrapper/controls instead -->\n<div class=\"control-group vis-option-type-select\">\n    <label style=\"width: {labelWidth}\" class=\"control-label {disabled? 'disabled' :''}\">\n        {@html label }\n    </label>\n\n    <div class=\"controls form-inline {disabled? 'disabled' :''}\">\n        <select disabled=\"{disabled}\" bind:value=\"value\" style=\"width:{ width }\">\n            {#if options.length} {#each options as opt}\n            <option value=\"{opt.value}\">{opt.label}</option>\n            {/each} {/if} {#if optgroups.length} {#each optgroups as optgroup}\n            <optgroup label=\"{optgroup.label}\">\n                {#each optgroup.options as opt}\n                <option value=\"{opt.value}\">{opt.label}</option>\n                {/each}\n            </optgroup>\n            {/each} {/if}\n        </select>\n    </div>\n</div>\n\n<style>\n    label.disabled {\n        color: #999;\n    }\n</style>\n\n<script>\n    export default {\n        data() {\n            return {\n                disabled: false,\n                width: 'auto',\n                labelWidth: 'auto',\n                options: [],\n                optgroups: []\n            };\n        }\n    };\n</script>\n",
    "<h3>{__('describe / histogram')}</h3>\n<svg ref:svg>\n    <!-- x axis -->\n    <g transform=\"translate({[padding.left,padding.top]})\">\n        <g class=\"axis x-axis\" transform=\"translate(0, {innerHeight})\">\n            {#each ticks as tick}\n            <g class=\"tick\" transform=\"translate({xScale(tick.x)},0)\">\n                <line y2=\"3\" />\n                <text y=\"5\">{tick.label}</text>\n            </g>\n            {/each} {#if highlight}\n            <polygon transform=\"translate({xScale(highlight.x)},0)\" points=\"0,0,4,6,-4,6\" />\n            {/if}\n        </g>\n\n        <!--         <g class='bars'>\n            {{#each bins as bin, i}}\n            <g class=\"bar\" transform=\"translate({{xScale(bin.x0)}},{{yScale(bin.length)}})\">\n                <title>{{tooltip(bin,i,bins,validValues.length)}}</title>\n                <rect x=\"0\"\n                    width=\"{{ bin.x1 != bin.x0 ? xScale(bin.x1)-xScale(bin.x0)-1 : 20 }}\"\n                    height='{{ innerHeight - yScale(bin.length) }}'\n                ></rect>\n            </g>\n            {{/each}}\n        </g> -->\n\n        <g class=\"bars\">\n            {#each bins as bin, i}\n            <g class=\"bar\" transform=\"translate({xScaleBand(bin.x0)},{yScale(bin.length)})\">\n                <title>{tooltip(bin,i,bins,validValues.length)}</title>\n                <rect width=\"{ bin.x1 != bin.x0 ? xScaleBand.bandwidth() : 20 }\" height=\"{ innerHeight - yScale(bin.length) }\"></rect>\n            </g>\n            {/each}\n        </g>\n    </g>\n</svg>\n<ul>\n    {#each stats as s}\n    <li>{s.name}: <tt on:mouseleave=\"show(false)\" on:mouseenter=\"show(s)\">{s.label}</tt></li>\n    {/each} {#if NAs>0}\n    <li>\n        {__('describe / histogram / invalid')}:\n        <tt style=\"color:#c71e1d\">{NAs}</tt> ({pct(NAs/values.length)})\n    </li>\n    {/if}\n</ul>\n<p class=\"learn-more\">{@html __(\"describe / histogram / learn-more\")}</p>\n\n<script>\n    import _range from 'underscore-es/range';\n    import _countBy from 'underscore-es/countBy';\n    import _keys from 'underscore-es/keys';\n    import { toFixed } from '../shared/utils.js';\n    import { __ } from '../shared/l10n';\n    import { scaleLinear, scaleBand } from 'd3-scale';\n    import { histogram, max, min, extent, mean, median, thresholdSturges } from 'd3-array';\n\n    var xScale_ = scaleLinear();\n    var xScaleBand_ = scaleBand();\n    var yScale_ = scaleLinear();\n\n    const pct = val => {\n        if (!val) return '0%';\n        if (val < 0.01) return '<1%';\n        return (val * 100).toFixed(0) + '%';\n    };\n\n    export default {\n        data() {\n            return {\n                format: d => d,\n                t: 0,\n                padding: { top: 10, right: 65, bottom: 20, left: 5 },\n                height: 200,\n                width: 500,\n                values: [],\n                highlight: false\n            };\n        },\n\n        computed: {\n            NAs({ values }) {\n                return values.filter(d => typeof d === 'string' || Number.isNaN(d)).length;\n            },\n\n            stats({ validValues, format }) {\n                const xmin = min(validValues);\n                const xmax = max(validValues);\n                const xmean = mean(validValues);\n                const xmed = median(validValues);\n                return [\n                    { x: xmin, label: format(xmin), name: 'Min' },\n                    { x: xmax, label: format(xmax), name: 'Max' },\n                    { x: xmean, label: format(xmean), name: __('describe / histogram / mean') },\n                    { x: xmed, label: format(xmed), name: __('describe / histogram / median') }\n                ];\n            },\n\n            validValues({ values }) {\n                return values.filter(d => typeof d === 'number' && !Number.isNaN(d));\n            },\n\n            ticks({ xScale, format }) {\n                return xScale.ticks(4).map(x => {\n                    return { x, label: format(x) };\n                });\n            },\n\n            bins({ niceDomain, validValues }) {\n                // const tickCnt = Math.min(_uniq(validValues).length, 14);\n                const dom = niceDomain;\n                // const classw = (s[1]-s[0]);\n                const bins = histogram()\n                    .domain(dom)\n                    .thresholds(thresholdSturges)(validValues);\n                const binWidths = _countBy(bins.map(b => b.x1 - b.x0));\n                if (bins.length > 2 && _keys(binWidths).length > 1) {\n                    // check first and last bin\n                    const binw = bins[1].x1 - bins[1].x0;\n                    const lst = dom[0] + Math.ceil((dom[1] - dom[0]) / binw) * binw;\n                    return histogram()\n                        .domain([dom[0], lst])\n                        .thresholds(_range(dom[0], lst + binw * 0.4, binw))(validValues);\n                }\n                return bins;\n            },\n\n            niceDomain({ validValues }) {\n                return scaleLinear()\n                    .domain(extent(validValues))\n                    .nice()\n                    .domain();\n            },\n\n            xScaleBand({ bins, innerWidth }) {\n                return xScaleBand_\n                    .domain(bins.map(d => d.x0))\n                    .paddingInner(0.1)\n                    .rangeRound([0, innerWidth])\n                    .align(0);\n            },\n\n            xScale({ niceDomain, bins, xScaleBand }) {\n                return xScale_.domain(niceDomain).rangeRound([0, xScaleBand.step() * bins.length]);\n            },\n\n            yScale({ innerHeight, bins }) {\n                return yScale_\n                    .domain([\n                        0,\n                        max(bins, function(d) {\n                            return d.length;\n                        })\n                    ])\n                    .range([innerHeight, 0]);\n            },\n\n            barWidth({ bins, xScale }) {\n                return xScale(bins[0].x1) - xScale(bins[0].x0) - 1;\n            },\n\n            innerWidth({ width, padding }) {\n                return width - padding.left - padding.right;\n            },\n            innerHeight({ height, padding }) {\n                return height - padding.bottom - padding.top;\n            }\n        },\n\n        helpers: {\n            tooltip(bin, i, bins, len) {\n                const tt =\n                    i === 0\n                        ? __('describe / histogram / tooltip / first')\n                        : i === bins.length - 1\n                        ? __('describe / histogram / tooltip / last')\n                        : __('describe / histogram / tooltip');\n                return tt\n                    .replace('$1', bin.length)\n                    .replace('$2', pct(bin.length / len))\n                    .replace('$3', toFixed(bin.x0))\n                    .replace('$4', toFixed(bin.x1));\n            },\n            pct,\n            formatMobile(tick) {\n                return \"'\" + (tick % 100);\n            },\n            __\n        },\n\n        methods: {\n            show(value) {\n                this.set({ highlight: value });\n            },\n            resize: function() {\n                var bcr = this.refs.svg.getBoundingClientRect();\n\n                this.set({\n                    width: bcr.right - bcr.left,\n                    height: bcr.bottom - bcr.top\n                });\n            }\n        },\n\n        oncreate() {\n            this.resize();\n        }\n    };\n</script>\n\n<style>h3 {\n  margin-top: 25px;\n}\n.chart {\n  width: 100%;\n  max-width: 500px;\n  margin: 0 auto;\n}\nsvg {\n  overflow: visible;\n  position: relative;\n  width: 100%;\n  height: 135px;\n}\n.tick {\n  font-family: Roboto, sans-serif;\n  font-size: 0.725em;\n  font-weight: 200;\n}\n.tick line {\n  shape-rendering: crispEdges;\n}\n.axis line {\n  stroke: #888;\n  shape-rendering: crispEdges;\n}\n.tick text {\n  fill: #888;\n  text-anchor: start;\n}\n.x-axis .tick text {\n  text-anchor: middle;\n  dominant-baseline: hanging;\n}\n.bars rect {\n  fill: #cecece;\n  stroke: none;\n  shape-rendering: crispEdges;\n}\ntt {\n  font-size: 13px;\n  font-weight: 400;\n  font-family: Roboto;\n  color: #297ea8;\n}\nul {\n  margin: 0;\n  padding: 0;\n}\nul li {\n  display: inline-block;\n  margin-right: 1em;\n  color: #777;\n  font-size: 13px;\n}\n:global(.learn-more) {\n  margin-top: 15px;\n  font-size: 12px;\n  color: #888;\n}\n</style>\n",
    "<div id=\"data-preview\" ref:hot />\n\n<script>\n    /* global dw,chart */\n    import HOT from 'Handsontable';\n    import getCellRenderer from './getCellRenderer';\n    // import cellHeaderClick from './cellHeaderClick';\n    import clone from '../../shared/clone.js';\n\n    let app = null;\n\n    export default {\n        data() {\n            return {\n                hot: null,\n                data: '',\n                readonly: false,\n                skipRows: 0,\n                firstRowIsHeader: true,\n                fixedColumnsLeft: 0,\n                searchIndex: 0,\n                sortBy: '-',\n                transpose: false,\n                activeColumn: null,\n                search: '',\n                searchResults: []\n            };\n        },\n        computed: {\n            currentResult({ searchResults, searchIndex }) {\n                if (!searchResults || !searchResults.length) return null;\n                const l = searchResults.length;\n                if (searchIndex < 0 || searchIndex >= l) {\n                    while (searchIndex < 0) searchIndex += l;\n                    if (searchIndex > l) searchIndex %= l;\n                }\n                return searchResults[searchIndex];\n            },\n            searchResults({ search, hot }) {\n                if (!hot || !search) return [];\n                return hot.search.query(search);\n            }\n        },\n        methods: {\n            render() {\n                const { hot } = this.get();\n                hot.render();\n            },\n            update() {\n                const { data, transpose, firstRowIsHeader, skipRows, hot } = this.get();\n\n                if (!data) return;\n\n                // get chart\n                const chart = this.store.get('dw_chart');\n\n                // pass dataset through chart to apply changes and computed columns\n                const ds = chart\n                    .dataset(\n                        dw.datasource\n                            .delimited({\n                                csv: data,\n                                transpose,\n                                firstRowIsHeader,\n                                skipRows\n                            })\n                            .parse()\n                    )\n                    .dataset();\n\n                this.set({ columnOrder: ds.columnOrder() });\n\n                // construct HoT data array\n                const hotData = [[]];\n                ds.eachColumn(c => hotData[0].push(c.title()));\n\n                ds.eachRow(r => {\n                    const row = [];\n                    ds.eachColumn(col => row.push(col.raw(r)));\n                    hotData.push(row);\n                });\n\n                // pass data to hot\n                hot.loadData(hotData);\n\n                const cellRenderer = getCellRenderer(this, chart, ds, HOT, {});\n\n                hot.updateSettings({\n                    cells: (row, col) => {\n                        const { readonly } = this.get();\n                        return {\n                            readOnly: readonly || (ds.hasColumn(col) && ds.column(col).isComputed && row === 0),\n                            renderer: cellRenderer\n                        };\n                    },\n                    manualColumnMove: []\n                });\n\n                this.set({ ds });\n                this.set({ has_changes: clone(chart.get('metadata.data.changes', [])).length > 0 });\n\n                HOT.hooks.once('afterRender', () => this.initCustomEvents());\n                hot.render();\n            },\n            dataChanged(cells) {\n                const { hot } = this.get();\n                let changed = false;\n                cells.forEach(([row, col, oldValue, newValue]) => {\n                    if (oldValue !== newValue) {\n                        const chart = this.store.get('dw_chart');\n                        const { transpose } = this.get();\n                        const changes = clone(chart.get('metadata.data.changes', []));\n                        row = hot.toPhysicalRow(row);\n                        col = chart.dataset().columnOrder()[col];\n                        if (transpose) {\n                            // swap row and col\n                            const tmp = row;\n                            row = col;\n                            col = tmp;\n                        }\n                        // store new change\n                        changes.push({\n                            column: col,\n                            row,\n                            value: newValue,\n                            previous: oldValue,\n                            time: new Date().getTime()\n                        });\n                        chart.set('metadata.data.changes', changes);\n                        changed = true;\n                    }\n                });\n                if (changed) {\n                    setTimeout(() => {\n                        this.update();\n                        chart.save();\n                    }, 100);\n                }\n            },\n            columnMoved(srcColumns, tgtIndex) {\n                const { hot } = this.get();\n                if (!srcColumns.length) return;\n                const { columnOrder } = this.get();\n                const newOrder = columnOrder.slice(0);\n                const after = columnOrder[tgtIndex];\n                const elements = newOrder.splice(srcColumns[0], srcColumns.length);\n                const insertAt = after === undefined ? newOrder.length : after ? newOrder.indexOf(after) : 0;\n                newOrder.splice(insertAt, 0, ...elements);\n                this.store.get('dw_chart').set('metadata.data.column-order', newOrder.slice(0));\n                this.set({ columnOrder: newOrder });\n                // update selection\n                HOT.hooks.once('afterRender', () => {\n                    setTimeout(() => {\n                        this.fire('resetSort');\n                        hot.selectCell(0, insertAt, hot.countRows() - 1, insertAt + elements.length - 1);\n                    }, 10);\n                });\n                this.update();\n            },\n            updateHeight() {\n                const h = document.querySelector('.ht_master.handsontable .wtHolder .wtHider').getBoundingClientRect().height;\n                this.refs.hot.style.height = Math.min(500, h + 10) + 'px';\n            },\n            checkRange(r, c, r2, c2) {\n                // check if\n                // 1. only a single column is selected, and\n                // 2. the range starts at the first row, and\n                // 3. the range extends through he last row\n                const { hot } = this.get();\n                const { ds } = this.get();\n\n                if (c === c2 && r === 0 && r2 === hot.countRows() - 1) {\n                    // const chart = this.store.get('dw_chart');\n                    // this.set({activeColumn: chart.dataset().column(c)});\n                    return;\n                }\n                if (c !== c2 && r === 0 && r2 === hot.countRows() - 1) {\n                    const sel = [];\n                    for (let i = Math.min(c, c2); i <= Math.max(c, c2); i++) {\n                        sel.push(+document.querySelector(`#data-preview .htCore tbody tr:first-child td:nth-child(${i + 2})`).dataset.column);\n                    }\n                    this.set({ multiSelection: sel.map(i => ds.column(i)), activeColumn: null });\n                    return;\n                }\n                this.set({ activeColumn: null, multiSelection: false });\n            },\n            initCustomEvents() {\n                // wait a bit to make sure HoT is rendered\n                setTimeout(() => {\n                    // catch click events on A,B,C,D... header row\n                    this.refs.hot.querySelectorAll('.htCore thead th:first-child').forEach(th => {\n                        th.removeEventListener('click', topLeftCornerClick);\n                        th.addEventListener('click', topLeftCornerClick);\n                    });\n                    // const cellHeaderClickHandler = cellHeaderClick(app);\n                    this.refs.hot.querySelectorAll('.htCore thead th+th').forEach(th => {\n                        th.removeEventListener('click', cellHeaderClick);\n                        th.addEventListener('click', cellHeaderClick);\n                    });\n                }, 500);\n            },\n\n            getColumnFormat(name) {\n                const chart = this.store.get('dw_chart');\n                const colFormats = chart.get('metadata.data.column-format', {});\n                return colFormats[name] || { type: 'auto', ignore: false };\n            }\n        },\n\n        oncreate() {\n            app = this;\n            HOT.hooks.once('afterRender', () => this.initCustomEvents());\n\n            window.addEventListener('keyup', evt => {\n                const { activeColumn, ds } = this.get();\n                if (!activeColumn) return;\n\n                if (evt.target.tagName.toLowerCase() === 'input' || evt.target.tagName.toLowerCase() === 'textarea') return;\n\n                if (evt.key === 'ArrowRight' || evt.key === 'ArrowLeft') {\n                    evt.preventDefault();\n                    evt.stopPropagation();\n                    const currentIndex = ds.indexOf(activeColumn.name());\n                    if (evt.key === 'ArrowRight') {\n                        // select next column\n                        this.set({ activeColumn: ds.column((currentIndex + 1) % ds.numColumns()) });\n                    } else {\n                        // select prev column\n                        this.set({\n                            activeColumn: ds.column((currentIndex - 1 + ds.numColumns()) % ds.numColumns())\n                        });\n                    }\n                }\n            });\n\n            const chart = this.store.get('dw_chart');\n\n            const hot = new HOT(this.refs.hot, {\n                data: [],\n                rowHeaders: i => {\n                    const ti = hot.getPlugin('ColumnSorting').translateRow(i);\n                    return ti + 1;\n                },\n                colHeaders: true,\n                fixedRowsTop: 1,\n                fixedColumnsLeft: this.get('fixedColumnsLeft'),\n                filters: true,\n                dropdownMenu: true,\n                startRows: 13,\n                startCols: 8,\n                fillHandle: false,\n                stretchH: 'all',\n                height: 500,\n                manualColumnMove: true,\n                selectionMode: 'range',\n                autoColumnSize: { useHeaders: true, syncLimit: 5 },\n                // comments: true,\n                // contextMenu: true,\n\n                // sorting\n                columnSorting: true,\n                sortIndicator: true,\n                sortFunction: function(sortOrder, columnMeta) {\n                    if (columnMeta.col > -1) {\n                        var column = chart.dataset().column(columnMeta.col);\n                        var colType = column.type();\n                        var plugin = hot.getPlugin('columnSorting');\n                        return function(a, b) {\n                            var sortFunction;\n                            if (a[0] === 0) return -1;\n                            // replace with values\n                            a[1] = column.val(a[0] - 1);\n                            b[1] = column.val(b[0] - 1);\n                            if (colType === 'number') {\n                                // sort NaNs at bottom\n                                if (isNaN(a[1])) a[1] = !sortOrder ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;\n                                if (isNaN(b[1])) b[1] = !sortOrder ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;\n                            }\n                            if (colType === 'date') {\n                                if (typeof a[1] === 'string') a[1] = new Date(110, 0, 1);\n                                if (typeof b[1] === 'string') b[1] = new Date(110, 0, 1);\n                            }\n                            switch (colType) {\n                                case 'date':\n                                    sortFunction = plugin.dateSort;\n                                    break;\n                                case 'number':\n                                    sortFunction = plugin.numericSort;\n                                    break;\n                                default:\n                                    sortFunction = plugin.defaultSort;\n                            }\n                            return sortFunction(sortOrder, columnMeta)(a, b);\n                        };\n                    }\n                    return (a, b) => a[0] - b[0];\n                },\n                afterGetColHeader: (col, th) => {\n                    const { activeColumn, ds } = this.get();\n                    if (!ds || !ds.hasColumn(col)) return;\n                    if ((col === 0 || col) && activeColumn && ds.column(col).name() === activeColumn.name()) {\n                        th.classList.add('selected');\n                    }\n\n                    if (col === 0 || col) {\n                        if (this.getColumnFormat(ds.column(col).name()).ignore) {\n                            th.classList.add('ignored');\n                        } else {\n                            th.classList.remove('ignored');\n                        }\n                    }\n                },\n                // search\n                search: 'search'\n            });\n\n            window.HT = hot;\n            this.set({ hot });\n\n            HOT.hooks.add('afterSetDataAtCell', a => this.dataChanged(a));\n            HOT.hooks.add('afterColumnMove', (a, b) => this.columnMoved(a, b));\n            HOT.hooks.add('afterRender', () => this.updateHeight());\n            HOT.hooks.add('afterSelection', (r, c, r2, c2) => this.checkRange(r, c, r2, c2));\n        },\n\n        onstate({ changed, current, previous }) {\n            const hot = current.hot;\n            if (!hot) return;\n\n            if (changed.data) {\n                this.update();\n            }\n            if (changed.firstRowIsHeader && previous && previous.firstRowIsHeader !== undefined) {\n                this.update();\n            }\n            if (changed.hot) {\n                this.update();\n            }\n            if (changed.search && previous) {\n                this.set({ searchIndex: 0 });\n            }\n\n            if (changed.searchResults) {\n                hot.render();\n            }\n            if (changed.currentResult && current.currentResult) {\n                hot.render();\n                const res = current.currentResult;\n                hot.scrollViewportTo(res.row, res.col);\n                setTimeout(() => {\n                    // one more time\n                    hot.scrollViewportTo(res.row, res.col);\n                }, 100);\n            }\n            if (changed.activeColumn) {\n                setTimeout(() => hot.render(), 10);\n            }\n            if (changed.fixedColumnsLeft) {\n                hot.updateSettings({ fixedColumnsLeft: current.fixedColumnsLeft });\n            }\n            if (changed.sorting) {\n                hot.sort(chart.dataset().indexOf(current.sorting.sortBy), current.sorting.sortDir);\n            }\n        }\n    };\n\n    function cellHeaderClick(evt) {\n        const th = this;\n        // reset the HoT selection\n        // find out which data column we're in\n        const k = th.parentNode.children.length;\n        let thIndex = -1;\n        // (stupid HTMLCollection has no indexOf)\n        for (let i = 0; i < k; i++) {\n            if (th.parentNode.children.item(i) === th) {\n                thIndex = i;\n                break;\n            }\n        }\n        // find column index\n        const colIndex = +app.refs.hot.querySelector(`.htCore tbody tr:first-child td:nth-child(${thIndex + 1})`).dataset.column;\n        const chart = app.store.get('dw_chart');\n        const { activeColumn, hot } = app.get();\n        if (chart.dataset().hasColumn(colIndex)) {\n            const newActive = chart.dataset().column(+colIndex);\n            // set active column (or unset if it's already set)\n            if (activeColumn && activeColumn.name() === newActive.name()) {\n                evt.target.parentNode.classList.remove('selected');\n                app.set({ activeColumn: false });\n                hot.deselectCell();\n            } else {\n                evt.target.parentNode.classList.add('selected');\n                app.set({ activeColumn: newActive });\n            }\n        }\n    }\n\n    function topLeftCornerClick(evt) {\n        evt.preventDefault();\n        const { transpose } = app.get();\n        app.set({ transpose: !transpose });\n        app.update();\n    }\n</script>\n\n<style>:global(#data-preview) {\n  width: 770px;\n  /*height: 400px;*/\n  overflow: auto;\n}\n:global(#data-preview) tr td,\n:global(#data-preview) tr th {\n  font-family: 'Roboto Mono', fixed;\n  font-size: 12px;\n}\n:global(#data-preview) colgroup col {\n  max-width: 500px !important;\n}\n:global(#data-preview) tr td {\n  padding: 3px 6px;\n}\n:global(#data-preview) tr td.textType {\n  color: #000000;\n}\n:global(#data-preview) tr td.dateType {\n  color: #39a832;\n  text-align: center;\n}\n:global(#data-preview) tr td.numberType {\n  color: #297ea8;\n  text-align: right;\n}\n:global(#data-preview) tr td.parsingError {\n  background: #fee;\n  color: #c00;\n}\n:global(#data-preview) tr td.readOnly.firstRow {\n  background: #eaeaea;\n  border-right-color: #aaa;\n  color: #777;\n}\n:global(#data-preview) tr td.active {\n  background: #e8f6fa;\n}\n:global(#data-preview) tr td.active.firstRow {\n  background: #d5e3e7;\n}\n:global(#data-preview) tr td.changed {\n  position: relative;\n}\n:global(#data-preview) tr td.changed:after {\n  content: ' ';\n  width: 0;\n  height: 0;\n  border-top: 7px solid orange;\n  border-right: 7px solid transparent;\n  display: block;\n  position: absolute;\n  left: 0;\n  top: 0;\n}\n:global(#data-preview) tr td.htSearchResult {\n  /*background: #ffd;*/\n  background: #fff8ef;\n  color: #8d6833 !important;\n}\n:global(#data-preview) tr td.htCurrentSearchResult {\n  color: #583707 !important;\n  background: #fcedd9;\n  /*background: #fffe83;*/\n}\n:global(#data-preview) thead th {\n  cursor: pointer;\n  background: #eee;\n  border-right: 1px solid hsl(0, 0%, 70%);\n}\n:global(#data-preview) thead th:first-child .cornerHeader:after {\n  display: block;\n  content: '';\n  width: 12px;\n  height: 12px;\n  background-image: url(/static/css/chart-editor/transpose.png);\n  background-size: contain;\n  position: absolute;\n  top: calc(50% - 6px);\n  left: calc(50% - 6px);\n}\n:global(#data-preview) thead th.selected {\n  background: #18a1cd;\n  color: white;\n  font-weight: bold;\n}\n:global(#data-preview) thead th:hover {\n  background: #ddd;\n}\n:global(#data-preview) thead th.selected:hover {\n  background: #18a1cd;\n}\n:global(#data-preview) thead tr th + th div:after {\n  position: absolute;\n  top: 3px;\n  right: 5px;\n}\n:global(#data-preview) thead th + th.selected div:after {\n  opacity: 1;\n}\n:global(#data-preview) td.ignored,\n:global(#data-preview) th.ignored {\n  color: #aaa !important;\n  text-decoration: line-through;\n  background-color: #f4f4f4;\n  /*&.area { background: #dce5f7; }*/\n}\n:global(#data-preview) td.ignored.firstRow,\n:global(#data-preview) th.ignored.firstRow {\n  background-color: #ddd;\n}\n:global(#data-preview) td.ignored.firstRow.area,\n:global(#data-preview) th.ignored.firstRow.area {\n  background: #d4ddee;\n}\n:global(#data-preview) th.ignored {\n  background-color: #e2e2e2;\n  color: #aaa;\n  text-decoration: line-through;\n}\n:global(#data-preview) tbody tr:first-child td {\n  background: #f3f3f3;\n  font-weight: bold;\n  border-bottom: 1px solid #999;\n}\n:global(#data-preview) .htCommentCell:after {\n  border-left: 8px solid transparent;\n  border-top: 8px solid orange;\n}\n:global(#data-preview) .handsontable td.area-1::before,\n:global(#data-preview) .handsontable td.area-2::before,\n:global(#data-preview) .handsontable td.area-3::before,\n:global(#data-preview) .handsontable td.area-4::before,\n:global(#data-preview) .handsontable td.area-5::before,\n:global(#data-preview) .handsontable td.area-6::before,\n:global(#data-preview) .handsontable td.area-7::before,\n:global(#data-preview) .handsontable td.area::before {\n  background: #18a1cd;\n}\n:global(#data-preview) .handsontable .columnSorting {\n  pointer-events: none;\n}\n:global(#data-preview) .handsontable .columnSorting.ascending::after {\n  font: normal normal normal 14px/1 FontAwesome;\n  content: '\\f160';\n  top: 0px;\n  right: -17px;\n}\n:global(#data-preview) .handsontable .columnSorting.descending::after {\n  font: normal normal normal 14px/1 FontAwesome;\n  content: '\\f161';\n  top: 0px;\n  right: -17px;\n}\n:global(#data-preview) .handsontable .selected .columnSorting::after {\n  color: white;\n}\n</style>\n"
  ],
  "names": [],
  "mappings": "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"
}